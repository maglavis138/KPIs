{
    "collab_server" : "",
    "contents" : "# LIBRARIES ========================================================================================================================\n\nlibrary(ggplot2)\nlibrary(reshape)\nlibrary(scales)\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(viridis)\nlibrary(ggthemes)\nlibrary(RColorBrewer)\nlibrary(highcharter)\nlibrary(quantmod)\nlibrary(dtplyr)\nlibrary(data.table)\nlibrary(readr)\nlibrary(jsonlite)\nlibrary(DT)\nlibrary(RMySQL)\n\n\n# DATA LOAD ========================================================================================================================\n\n# mydb = dbConnect(MySQL(), host = \"104.198.210.36\", user = \"root\", password = \"tacozombies54992\", db = \"analytics\")\n# \n# rs <- dbSendQuery(mydb, \"select FEED_DATA.*, EDITORIAL_AUTHOR.author, POST_DATA.* \n# from EDITORIAL_AUTHOR \n# inner join FEED_DATA on EDITORIAL_AUTHOR.status_id = FEED_DATA.status_id\n# inner join POST_DATA on EDITORIAL_AUTHOR.status_id = POST_DATA.status_id\")\n# DataArticles <- fetch(rs, -1)\n# \n# dbClearResult(rs)\n# dbDisconnect(mydb)\n# \n# DataArticles <- DataArticles[, !duplicated(colnames(DataArticles))]\n# DataArticles$date <- as.Date(DataArticles$date)\n# \n# DataArticles$author_status <- ifelse(!(DataArticles$author %in% c(\"Jorge Rodriguez-Jimenez\", \"Omar Villegas\", \"Lucas Molandes\", \"Jessica Garcia\", \"Andrew Santiago\", \"Jason Marcus\")), \"Contributor\", DataArticles$author)\n# \n# DataArticles$author_status <- ifelse(DataArticles$author %in% c(\"mitÃº Staff\", \"Adriana Venegas\", \"Fidel Martinez\", \"Alex Alvarez\", \"Wendy Barba\"), \"Old Staff\", DataArticles$author_status)\n\nload(\"data/DataArticles.Rda\")\nload(\"data/DataArticlesBH.Rda\")\nload(\"data/DataArticlesFC.Rda\")\n\nDataArticles <- DataArticles[!is.na(DataArticles$author),]\nDataArticles$article_click_rank <- ifelse(DataArticles$link_clicks <= 5000, \"< 5K\", ifelse(DataArticles$link_clicks <= 10000, \"5K - 10K\", ifelse(DataArticles$link_clicks <= 25000, \"10K - 25K\", \"> 25K\")))\n\n\nhcoptslang <- getOption(\"highcharter.lang\")\nhcoptslang$thousandsSep <- \",\"\noptions(highcharter.lang = hcoptslang)\n\n\n# UI ================================================================================================================================\n\n\nui <- dashboardPage(skin = \"blue\",\n                    \n                    # Dashboard Header ------------------------------------------------------------------------------------------------------------------     \n                    \n                    dashboardHeader(title = \"Creators Content\"),\n                    \n                    # Dashboard Sidebar -----------------------------------------------------------------------------------------------------------------\n                    \n                    dashboardSidebar(\n                      \n                      tags$head(tags$style(HTML(\".sidebar { height: 200vh; }\"))),\n                      \n                      sidebarMenu(\n                        \n                        menuItem(\"Articles WAM\", tabName = \"articles_wam\", icon = icon(\"fa fa-file-text-o\")),\n                        menuItem(\"Videos\", tabName = \"videos_reposts\", icon = icon(\"fa fa-film\")),\n                        menuItem(\"Memes\", tabName = \"memes_reposts\", icon = icon(\"fa fa-picture-o\"))\n                        \n                      )\n                    ),\n                    \n                    # Dashboard Body --------------------------------------------------------------------------------------------------------------------               \n                    dashboardBody(fluidRow(\n                      \n                      tabItems(\n                        \n                        #  1. Articles WAM -----------------------------------------------------------------------------------------------------------   \n                        \n                        tabItem(tabName = \"articles_wam\", fluidRow(\n                          \n                          tabBox( title = \"\",\n                                  \n                                  \n                                  #  1.1 Articles Repost Suggestions ------------------------------------------------------------------------------------\n                                  tabPanel(\"Overview\",\n                                           \n                                           box(title = \"\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                               column(2, selectizeInput(inputId = \"chart_time_overview_wam\", label = \"Timeline:\", choices = c(\"Day\", \"Week\", \"Month\"), selected = \"Week\")),\n                                               column(2, selectizeInput(inputId = \"chart_general_detail\", label = \"View:\", choices = c(\"General\", \"Detail\"), selected = \"General\")),\n                                               column(2, selectizeInput(inputId = \"chart_avg_total\", label = \"Method:\", choices = c(\"Average\", \"Sum\"), selected = \"Average\")),\n                                               column(2, selectizeInput(inputId = \"chart_stack\", label = \"Stack:\", choices = c(\"Normal\", \"Percent\"), selected = \"Normal\")),\n                                               column(2,selectizeInput(inputId = \"chart_type\", label = \"Type:\", choices = c(\"Area\", \"Column\"), selected = \"Column\")),\n                                               column(2, selectizeInput(inputId = \"article_overview_repost_wam\", label = \"Posts:\", choices = c(\"Originals\",\"Reposts\"), selected = c(\"Originals\",\"Reposts\"), multiple = TRUE)),\n                                               column(8, selectizeInput(inputId = \"article_overview_categories\", label = \"Categories:\", choices = as.character(unique(DataArticles$category)[order(unique(DataArticles$category))]), selected = as.character(unique(DataArticles$category)), multiple = TRUE)),\n                                               column(4, actionButton(inputId = \"plot_article_overview_wam\", label = \"Plot\", width = \"100%\", style = \"height:80px\")),\n                                               \n                                               \n                                               column(6, highchartOutput(\"PlotOverviewAuthorsWAM\", height = 500)),\n                                               column(6, highchartOutput(\"PlotOverviewAuthorsWAM1\", height = 500)),\n                                               column(6, highchartOutput(\"PlotOverviewAuthorsWAM2\", height = 500)),\n                                               column(6, highchartOutput(\"PlotOverviewAuthorsWAM3\", height = 500))\n                                               \n                                           )\n                                           \n                                  ),\n                                  \n                                  \n                                  #  1.2 Articles Repost Candidates -------------------------------------------------------------------------------------\n                                  tabPanel(\"Leaderboard\",\n                                           \n                                           box(title = \"Authors\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                               tags$head(\n                                                 tags$style(type = \"text/css\",\n                                                            HTML(\"th { text-align: center; }\")\n                                                 )\n                                               ),\n                                               \n                                               column(3, dateRangeInput('leaderboard_date_range',label = \"Date:\", start = range(DataArticles$date)[1], end = range(DataArticles$date)[2], min = range(DataArticles$date)[1], max = range(DataArticles$date)[2])),\n                                               column(3, selectizeInput(inputId = \"leaderboard_variable_select\", label = \"Variable:\", choices = c(\"Link Clicks\", \"Reach\", \"Engagements\"), \"Link Clicks\", multiple = FALSE)),\n                                               column(3, selectizeInput(inputId = \"leaderboard_staff_select\", label = \"Staff Status:\", choices = c(\"Current Staff\", \"Old Staff\", \"Contributor\"), c(\"Current Staff\", \"Old Staff\", \"Contributor\"), multiple = TRUE)),\n                                               column(3, actionButton(inputId = \"leaderboard_apply_button\", label = \"Apply\", width = \"100%\", style = \"height:60px\")),\n                                               column(9, selectizeInput(inputId = \"leaderboard_categories_select\", label = \"Categories:\", choices = as.character(unique(DataArticles$category)[order(unique(DataArticles$category))]), selected = as.character(unique(DataArticles$category)), multiple = TRUE)),\n                                               column(3,selectizeInput(inputId = \"chart_link_clicks_group_wam\", label = \"Link Clicks:\", choices = c(\"< 5K\", \"5K - 10K\", \"10K - 25K\", \"> 25K\"), selected = c(\"< 5K\", \"5K - 10K\", \"10K - 25K\", \"> 25K\"), multiple = TRUE)),\n                                               \n                                               column(12, highchartOutput(\"LeaderboardAuthorsGraph\", height = 500)),\n                                               \n                                               \n                                               column(12, DT::dataTableOutput(\"LeaderboardTable\"))\n                                           ),\n                                           \n                                           box(title = \"Posts\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                               fluidRow(\n                                               column(width = 12, \n                                                      \n                                                      DT::dataTableOutput(\"LeaderboardPostsTable\", width = \"100%\"))\n                                               )\n                                               \n                                           )\n                                           \n                                  ),\n                                  \n                                  \n                                  #  1.3 Articles Repost Groups -----------------------------------------------------------------------------------------                    \n                                  tabPanel(\"Categories\",\n                                           \n                                           box(title = \"Summary\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                               # column(1, ),\n                                               column(12, \n                                                      checkboxInput(inputId = \"category_author_cs_select_checkbox\", label = \"\", value = TRUE, width = \"10px\"),\n                                                      \n                                                      selectizeInput(inputId = \"category_author_cs_select\", label = \"Current Staff:\", choices = as.character(unique(DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\"),]$author)[order(unique(DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\"),]$author))]), selected = as.character(unique(DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\"),]$author)), multiple = TRUE)),\n                                               column(12, selectizeInput(inputId = \"category_author_os_select\", label = \"Old Staff:\", choices = as.character(unique(DataArticles[which(DataArticles$author_status == \"Old Staff\"),]$author)[order(unique(DataArticles[which(DataArticles$author_status == \"Old Staff\"),]$author))]), selected = as.character(unique(DataArticles[which(DataArticles$author_status == \"Old Staff\"),]$author)), multiple = TRUE)),\n                                               column(12, selectizeInput(inputId = \"category_author_c_select\", label = \"Contributor\", choices = as.character(unique(DataArticles[which(DataArticles$author_status == \"Contributor\"),]$author)[order(unique(DataArticles[which(DataArticles$author_status == \"Contributor\"),]$author))]), selected = as.character(unique(DataArticles[which(DataArticles$author_status == \"Contributor\"),]$author)), multiple = TRUE)),\n                                               \n                                               column(12, actionButton(inputId = \"category_author_select_button\", label = \"Apply\", width = \"100%\", style = \"height:60px\")),\n                                               br(),\n                                               column(6, highchartOutput(\"LeaderboardCategoriesGraph\", height = 500)), \n                                               column(6, highchartOutput(\"CategoriesReachGraph\", height = 500)),\n                                               column(6, highchartOutput(\"CategoriesLinkClicksGraph\", height = 500)),\n                                               column(6, highchartOutput(\"CategoriesEngagementsGraph\", height = 500))\n                                               )\n                                           \n                                  )\n                                  \n                                  , width = 12))),\n                        \n                        \n                        #  2. Videos Repost -----------------------------------------------------------------------------------------------------------   \n                        \n                        tabItem(tabName = \"videos_reposts\", fluidRow(\n                          \n                          tabBox( title = \"\",\n                                  \n                                  \n                                  #  2.1 Videos Repost Suggestions ------------------------------------------------------------------------------------\n                                  tabPanel(\"Repost Suggestions\"\n                                           \n                                  ),\n                                  \n                                  \n                                  #  2.2 Videos Repost Candidates -------------------------------------------------------------------------------------\n                                  tabPanel(\"Repost Candidates\"\n                                           \n                                  ),\n                                  \n                                  \n                                  #  2.3 Videos Repost Groups -----------------------------------------------------------------------------------------                \n                                  \n                                  tabPanel(\"Repost Groups\"\n                                           \n                                  )\n                                  \n                                  , width = 12))),\n                        \n                        \n                        #  3. Memes Repost -----------------------------------------------------------------------------------------------------------   \n                        tabItem(tabName = \"memes_reposts\", fluidRow(\n                          \n                          tabBox( title = \"\",\n                                  \n                                  \n                                  #  3.1 Memes Repost Suggestions ------------------------------------------------------------------------------------\n                                  tabPanel(\"Repost Suggestions\"\n                                           \n                                  ),\n                                  \n                                  \n                                  #  3.2 Memes Repost Candidates -------------------------------------------------------------------------------------\n                                  tabPanel(\"Repost Candidates\"\n                                           \n                                  ),\n                                  \n                                  \n                                  #  3.3 Memes Repost Groups -----------------------------------------------------------------------------------------                \n                                  \n                                  tabPanel(\"Repost Groups\"\n                                           \n                                  )\n                                  \n                                  , width = 12)))\n                        \n                        \n                        \n                        \n                        \n                      )))\n)\n\n\n\n\n# SERVER  ===========================================================================================================================\n\nserver <- function(input, output, session){\n  \n  # Overview --------------------------------------------------------------------------------------------------------------\n  \n  Plot_Authors_Output_Function <- function (contributors, old_staff, current_staff, input_chart_time, input_chart_stack, input_chart_type = tolower(input$chart_type)){\n    \n    colors <- c(brewer.pal(3, \"Paired\"))\n    \n    hc <-highchart(type = \"stock\") %>%\n      hc_title(text = \"Content Output\", align = \"left\", style = list(fontSize = \"25px\")) %>%\n      hc_colors(colors) %>%\n      hc_yAxis(offset = 30) %>%\n      hc_add_series(contributors, name = \"Contributors\", type = input_chart_type) %>%\n      hc_add_series(old_staff, name = \"Old Staff\", type = input_chart_type) %>%\n      hc_add_series(current_staff, name = \"Current Staff\", type = input_chart_type) %>%\n      hc_scrollbar(enabled = FALSE) %>%\n      hc_rangeSelector(selected = ifelse(input_chart_time == \"day\", 0, 2)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = input_chart_stack, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input_chart_time, list(1)))))) %>%\n      hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  }\n  \n  Plot_Authors_Output_Function_Detail <- function (contributors, old_staff, jorge_rodriguez, omar_villegas, lucas_molandes, jessica_garcia, andrew_santiago, jason_marcus, input_chart_time, input_chart_stack, input_chart_type = tolower(input$chart_type)){\n   \n    colors <- c(brewer.pal(8, \"Paired\"))\n      \n    hc <-highchart(type = \"stock\") %>%\n      hc_title(text = \"Content Output\", align = \"left\", style = list(fontSize = \"25px\")) %>%\n      hc_colors(colors) %>%\n      hc_yAxis(offset = 30) %>% \n      hc_add_series(contributors, name = \"Contributors\", type = input_chart_type) %>%\n      hc_add_series(old_staff, name = \"Old Staff\", type = input_chart_type) %>%\n      hc_add_series(jorge_rodriguez, name = \"Jorge Rodriguez-Jimenez\", type = input_chart_type) %>%\n      hc_add_series(omar_villegas, name = \"Omar Villegas\", type = input_chart_type) %>%\n      hc_add_series(lucas_molandes, name = \"Lucas Molandes\", type = input_chart_type) %>%\n      hc_add_series(jessica_garcia, name = \"Jessica Garcia\", type = input_chart_type) %>%\n      hc_add_series(andrew_santiago, name = \"Andrew Santiago\", type = input_chart_type) %>%\n      hc_add_series(jason_marcus, name = \"Jason Marcus\", type = input_chart_type) %>%\n      hc_scrollbar(enabled = FALSE) %>%\n      hc_rangeSelector(selected = ifelse(input_chart_time == \"day\", 0, 2)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = input_chart_stack, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input_chart_time, list(1)))))) %>%\n      hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  }\n  \n  Plot_Authors_Reach_Function <- function (contributors, old_staff, current_staff, input_chart_time, input_chart_method, input_chart_stack, input_chart_type = tolower(input$chart_type)){\n    \n    colors <- c(brewer.pal(3, \"Paired\"))\n    \n    hc <-highchart(type = \"stock\") %>%\n      hc_title(text = \"Reach\", align = \"left\", style = list(fontSize = \"25px\")) %>%\n      hc_colors(colors) %>%\n      hc_yAxis(offset = 30) %>%\n      hc_add_series(contributors, name = \"Contributors\", type = input_chart_type) %>%\n      hc_add_series(old_staff, name = \"Old Staff\", type = input_chart_type) %>%\n      hc_add_series(current_staff, name = \"Current Staff\", type = input_chart_type) %>%\n      hc_scrollbar(enabled = FALSE) %>%\n      hc_rangeSelector(selected = ifelse(input_chart_time == \"day\", 0, 2)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = input_chart_stack, dataGrouping = list(approximation = input_chart_method, enabled = TRUE, forced = TRUE, units = list(list(input_chart_time, list(1)))))) %>%\n      hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n      hc_tooltip(valueDecimals = ifelse(input_chart_method == \"average\", 2, 0)) %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n   \n  }\n  \n  Plot_Authors_Reach_Function_Detail <- function (contributors, old_staff, jorge_rodriguez, omar_villegas, lucas_molandes, jessica_garcia, andrew_santiago, jason_marcus, input_chart_time, input_chart_method, input_chart_stack, input_chart_type = tolower(input$chart_type)){\n    \n    colors <- c(brewer.pal(8, \"Paired\"))\n    \n    hc <-highchart(type = \"stock\") %>%\n      hc_title(text = \"Reach\", align = \"left\", style = list(fontSize = \"25px\")) %>%\n      hc_colors(colors) %>%\n      hc_yAxis(offset = 30) %>% \n      hc_add_series(contributors, name = \"Contributors\", type = input_chart_type) %>%\n      hc_add_series(old_staff, name = \"Old Staff\", type = input_chart_type) %>%\n      hc_add_series(jorge_rodriguez, name = \"Jorge Rodriguez-Jimenez\", type = input_chart_type) %>%\n      hc_add_series(omar_villegas, name = \"Omar Villegas\", type = input_chart_type) %>%\n      hc_add_series(lucas_molandes, name = \"Lucas Molandes\", type = input_chart_type) %>%\n      hc_add_series(jessica_garcia, name = \"Jessica Garcia\", type = input_chart_type) %>%\n      hc_add_series(andrew_santiago, name = \"Andrew Santiago\", type = input_chart_type) %>%\n      hc_add_series(jason_marcus, name = \"Jason Marcus\", type = input_chart_type) %>%\n      hc_scrollbar(enabled = FALSE) %>%\n      hc_rangeSelector(selected = ifelse(input_chart_time == \"day\", 0, 2)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = input_chart_stack, dataGrouping = list(approximation = input_chart_method, enabled = TRUE, forced = TRUE, units = list(list(input_chart_time, list(1)))))) %>%\n      hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n      hc_tooltip(valueDecimals = ifelse(input_chart_method == \"average\", 2, 0)) %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  }\n  \n  Plot_Authors_Clicks_Function <- function (contributors, old_staff, current_staff, input_chart_time, input_chart_method, input_chart_stack, input_chart_type = tolower(input$chart_type)){\n    \n    colors <- c(brewer.pal(3, \"Paired\"))\n    \n    hc <-highchart(type = \"stock\") %>%\n      hc_title(text = \"Link Clicks\", align = \"left\", style = list(fontSize = \"25px\")) %>%\n      hc_colors(colors) %>%\n      hc_yAxis(offset = 30) %>% \n      hc_add_series(contributors, name = \"Contributors\", type = input_chart_type) %>%\n      hc_add_series(old_staff, name = \"Old Staff\", type = input_chart_type) %>%\n      hc_add_series(current_staff, name = \"Current Staff\", type = input_chart_type) %>%\n      hc_scrollbar(enabled = FALSE) %>%\n      hc_rangeSelector(selected = ifelse(input_chart_time == \"day\", 0, 2)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = input_chart_stack, dataGrouping = list(approximation = input_chart_method, enabled = TRUE, forced = TRUE, units = list(list(input_chart_time, list(1)))))) %>%\n      hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n      hc_tooltip(valueDecimals = ifelse(input_chart_method == \"average\", 2, 0)) %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  }\n  \n  Plot_Authors_Clicks_Function_Detail <- function (contributors, old_staff, jorge_rodriguez, omar_villegas, lucas_molandes, jessica_garcia, andrew_santiago, jason_marcus, input_chart_time, input_chart_method, input_chart_stack, input_chart_type = tolower(input$chart_type)){\n    \n    colors <- c(brewer.pal(8, \"Paired\"))\n    \n    hc <-highchart(type = \"stock\") %>%\n      hc_title(text = \"Link Clicks\", align = \"left\", style = list(fontSize = \"25px\")) %>%\n      hc_colors(colors) %>%\n      hc_yAxis(offset = 30) %>% \n      hc_add_series(contributors, name = \"Contributors\", type = input_chart_type) %>%\n      hc_add_series(old_staff, name = \"Old Staff\", type = input_chart_type) %>%\n      hc_add_series(jorge_rodriguez, name = \"Jorge Rodriguez-Jimenez\", type = input_chart_type) %>%\n      hc_add_series(omar_villegas, name = \"Omar Villegas\", type = input_chart_type) %>%\n      hc_add_series(lucas_molandes, name = \"Lucas Molandes\", type = input_chart_type) %>%\n      hc_add_series(jessica_garcia, name = \"Jessica Garcia\", type = input_chart_type) %>%\n      hc_add_series(andrew_santiago, name = \"Andrew Santiago\", type = input_chart_type) %>%\n      hc_add_series(jason_marcus, name = \"Jason Marcus\", type = input_chart_type) %>%\n      hc_scrollbar(enabled = FALSE) %>%\n      hc_rangeSelector(selected = ifelse(input_chart_time == \"day\", 0, 2)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = input_chart_stack, dataGrouping = list(approximation = input_chart_method, enabled = TRUE, forced = TRUE, units = list(list(input_chart_time, list(1)))))) %>%\n      hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n      hc_tooltip(valueDecimals = ifelse(input_chart_method == \"average\", 2, 0)) %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  }\n  \n  Plot_Authors_Interactions_Function <- function (contributors, old_staff, current_staff, input_chart_time, input_chart_method, input_chart_stack, input_chart_type = tolower(input$chart_type)){\n    \n    colors <- c(brewer.pal(3, \"Paired\"))\n    \n    hc <-highchart(type = \"stock\") %>%\n      hc_title(text = \"Interactions\", align = \"left\", style = list(fontSize = \"25px\")) %>%\n      hc_colors(colors) %>%\n      hc_yAxis(offset = 30) %>% \n      hc_add_series(contributors, name = \"Contributors\", type = input_chart_type) %>%\n      hc_add_series(old_staff, name = \"Old Staff\", type = input_chart_type) %>%\n      hc_add_series(current_staff, name = \"Current Staff\", type = input_chart_type) %>%\n      hc_scrollbar(enabled = FALSE) %>%\n      hc_rangeSelector(selected = ifelse(input_chart_time == \"day\", 0, 2)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = input_chart_stack, dataGrouping = list(approximation = input_chart_method, enabled = TRUE, forced = TRUE, units = list(list(input_chart_time, list(1)))))) %>%\n      hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n      hc_tooltip(valueDecimals = ifelse(input_chart_method == \"average\", 2, 0)) %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  }\n  \n  Plot_Authors_Interactions_Function_Detail <- function (contributors, old_staff, jorge_rodriguez, omar_villegas, lucas_molandes, jessica_garcia, andrew_santiago, jason_marcus, input_chart_time, input_chart_method, input_chart_stack, input_chart_type = tolower(input$chart_type)){\n    \n    colors <- c(brewer.pal(8, \"Paired\"))\n    \n    hc <-highchart(type = \"stock\") %>%\n      hc_title(text = \"Interactions\", align = \"left\", style = list(fontSize = \"25px\")) %>%\n      hc_colors(colors) %>%\n      hc_yAxis(offset = 30) %>% \n      hc_add_series(contributors, name = \"Contributors\", type = input_chart_type) %>%\n      hc_add_series(old_staff, name = \"Old Staff\", type = input_chart_type) %>%\n      hc_add_series(jorge_rodriguez, name = \"Jorge Rodriguez-Jimenez\", type = input_chart_type) %>%\n      hc_add_series(omar_villegas, name = \"Omar Villegas\", type = input_chart_type) %>%\n      hc_add_series(lucas_molandes, name = \"Lucas Molandes\", type = input_chart_type) %>%\n      hc_add_series(jessica_garcia, name = \"Jessica Garcia\", type = input_chart_type) %>%\n      hc_add_series(andrew_santiago, name = \"Andrew Santiago\", type = input_chart_type) %>%\n      hc_add_series(jason_marcus, name = \"Jason Marcus\", type = input_chart_type) %>%\n      hc_scrollbar(enabled = FALSE) %>%\n      hc_rangeSelector(selected = ifelse(input_chart_time == \"day\", 0, 2)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = input_chart_stack, dataGrouping = list(approximation = input_chart_method, enabled = TRUE, forced = TRUE, units = list(list(input_chart_time, list(1)))))) %>%\n      hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n      hc_tooltip(valueDecimals = ifelse(input_chart_method == \"average\", 2, 0)) %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  }\n  \n  \n  output$PlotOverviewAuthorsWAM <- renderHighchart({\n    \n    input$plot_article_overview_wam\n    isolate({\n      \n      DataArticles <- DataArticles[which(DataArticles$category %in% input$article_overview_categories),]\n      DataArticles[which(DataArticles$repost == 0),]$repost <- \"Originals\"\n      DataArticles[which(DataArticles$repost == 1),]$repost <- \"Reposts\"\n      \n      input_chart_time <- tolower(input$chart_time_overview_wam)\n      input_chart_stack <- tolower(input$chart_stack)\n      \n      dates <- data.frame(created_time = DataArticles$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      # contributors <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status == \"Contributor\"& DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = rep(1,nrow(DataArticles[which(DataArticles$author_status == \"Contributor\" & DataArticles$repost %in% input$article_overview_repost_wam),]))), by = \"created_time\", all = TRUE)\n      # contributors <- as.xts(contributors[,\"num\"], order.by = contributors[,\"created_time\"])\n      # \n      # old_staff <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status == \"Old Staff\" & DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = rep(1,nrow(DataArticles[which(DataArticles$author_status == \"Old Staff\" & DataArticles$repost %in% input$article_overview_repost_wam),]))), by = \"created_time\", all = TRUE)\n      # old_staff <- as.xts(old_staff[,\"num\"], order.by = old_staff[,\"created_time\"])\n      # \n      # current_staff <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\" & DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = rep(1,nrow(DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\" & DataArticles$repost %in% input$article_overview_repost_wam),]))), by = \"created_time\", all = TRUE)\n      # current_staff <- as.xts(current_staff[,\"num\"], order.by = current_staff[,\"created_time\"])\n      # \n      # jorge_rodriguez <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status == \"Jorge Rodriguez-Jimenez\" & DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = rep(1,nrow(DataArticles[which(DataArticles$author_status == \"Jorge Rodriguez-Jimenez\" & DataArticles$repost %in% input$article_overview_repost_wam),]))), by = \"created_time\", all = TRUE)\n      # jorge_rodriguez <- as.xts(jorge_rodriguez[,\"num\"], order.by = jorge_rodriguez[,\"created_time\"])\n      # \n      # omar_villegas <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status == \"Omar Villegas\" & DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = rep(1,nrow(DataArticles[which(DataArticles$author_status == \"Omar Villegas\" & DataArticles$repost %in% input$article_overview_repost_wam),]))), by = \"created_time\", all = TRUE)\n      # omar_villegas <- as.xts(omar_villegas[,\"num\"], order.by = omar_villegas[,\"created_time\"])\n      # \n      # lucas_molandes <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status == \"Lucas Molandes\" & DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = rep(1,nrow(DataArticles[which(DataArticles$author_status == \"Lucas Molandes\" & DataArticles$repost %in% input$article_overview_repost_wam),]))), by = \"created_time\", all = TRUE)\n      # lucas_molandes <- as.xts(lucas_molandes[,\"num\"], order.by = lucas_molandes[,\"created_time\"])\n      # \n      # jessica_garcia <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status == \"Jessica Garcia\" & DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = rep(1,nrow(DataArticles[which(DataArticles$author_status == \"Jessica Garcia\" & DataArticles$repost %in% input$article_overview_repost_wam),]))), by = \"created_time\", all = TRUE)\n      # jessica_garcia <- as.xts(jessica_garcia[,\"num\"], order.by = jessica_garcia[,\"created_time\"])\n      # \n      # andrew_santiago <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status == \"Andrew Santiago\" & DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = rep(1,nrow(DataArticles[which(DataArticles$author_status == \"Andrew Santiago\" & DataArticles$repost %in% input$article_overview_repost_wam),]))), by = \"created_time\", all = TRUE)\n      # andrew_santiago <- as.xts(andrew_santiago[,\"num\"], order.by = andrew_santiago[,\"created_time\"])\n      # \n      # jason_marcus <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status == \"Jason Marcus\" & DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = rep(1,nrow(DataArticles[which(DataArticles$author_status == \"Jason Marcus\" & DataArticles$repost %in% input$article_overview_repost_wam),]))), by = \"created_time\", all = TRUE)\n      # jason_marcus <- as.xts(jason_marcus[,\"num\"], order.by = jason_marcus[,\"created_time\"])\n      \n      \n      contributors <- as.xts(rep(1,nrow(DataArticles[which(DataArticles$author_status == \"Contributor\" & DataArticles$repost %in% input$article_overview_repost_wam),])), order.by = DataArticles[which(DataArticles$author_status == \"Contributor\"& DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      old_staff <- as.xts(rep(1,nrow(DataArticles[which(DataArticles$author_status == \"Old Staff\" & DataArticles$repost %in% input$article_overview_repost_wam),])), order.by = DataArticles[which(DataArticles$author_status == \"Old Staff\"& DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      current_staff <- as.xts(rep(1,nrow(DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\" & DataArticles$repost %in% input$article_overview_repost_wam),])), order.by = DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      jorge_rodriguez <- as.xts(rep(1,nrow(DataArticles[which(DataArticles$author_status == \"Jorge Rodriguez-Jimenez\" & DataArticles$repost %in% input$article_overview_repost_wam),])), order.by = DataArticles[which(DataArticles$author_status == \"Jorge Rodriguez-Jimenez\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n\n      omar_villegas <- as.xts(rep(1,nrow(DataArticles[which(DataArticles$author_status == \"Omar Villegas\" & DataArticles$repost %in% input$article_overview_repost_wam),])), order.by = DataArticles[which(DataArticles$author_status == \"Omar Villegas\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n\n      lucas_molandes <- as.xts(rep(1,nrow(DataArticles[which(DataArticles$author_status == \"Lucas Molandes\" & DataArticles$repost %in% input$article_overview_repost_wam),])), order.by = DataArticles[which(DataArticles$author_status == \"Lucas Molandes\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n\n      jessica_garcia <- as.xts(rep(1,nrow(DataArticles[which(DataArticles$author_status == \"Jessica Garcia\" & DataArticles$repost %in% input$article_overview_repost_wam),])), order.by = DataArticles[which(DataArticles$author_status == \"Jessica Garcia\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n\n      andrew_santiago <- as.xts(rep(1,nrow(DataArticles[which(DataArticles$author_status == \"Andrew Santiago\" & DataArticles$repost %in% input$article_overview_repost_wam),])), order.by = DataArticles[which(DataArticles$author_status == \"Andrew Santiago\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n\n      jason_marcus <- as.xts(rep(1,nrow(DataArticles[which(DataArticles$author_status == \"Jason Marcus\" & DataArticles$repost %in% input$article_overview_repost_wam),])), order.by = DataArticles[which(DataArticles$author_status == \"Jason Marcus\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n\n      # colores<- c('#D55200', '#2580B9')\n      \n      if(input$chart_general_detail == \"General\"){\n        \n        Plot_Authors_Output_Function(contributors, old_staff, current_staff, input_chart_time, input_chart_stack)\n        \n      }\n      \n      else {\n        \n        Plot_Authors_Output_Function_Detail(contributors, old_staff, jorge_rodriguez, omar_villegas, lucas_molandes, jessica_garcia, andrew_santiago, jason_marcus, input_chart_time, input_chart_stack)\n          \n      }\n      \n    })\n  })\n  \n  output$PlotOverviewAuthorsWAM1 <- renderHighchart({\n    \n    input$plot_article_overview_wam\n    isolate({\n      \n      dates <- data.frame(created_time = DataArticles$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      DataArticles <- DataArticles[which(DataArticles$category %in% input$article_overview_categories),]\n      DataArticles[which(DataArticles$repost == 0),]$repost <- \"Originals\"\n      DataArticles[which(DataArticles$repost == 1),]$repost <- \"Reposts\"\n      \n      input_chart_time <- tolower(input$chart_time_overview_wam)\n      input_chart_method <- tolower(input$chart_avg_total)\n      input_chart_stack <- tolower(input$chart_stack)\n      \n      # contributors <- as.xts(DataArticles[which(DataArticles$author_status == \"Contributor\"& DataArticles$repost %in% input$article_overview_repost_wam),]$post_reach, order.by = DataArticles[which(DataArticles$author_status == \"Contributor\"& DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      # \n      # old_staff <- as.xts(DataArticles[which(DataArticles$author_status == \"Old Staff\"& DataArticles$repost %in% input$article_overview_repost_wam),]$post_reach, order.by = DataArticles[which(DataArticles$author_status == \"Old Staff\"& DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      # \n      # current_staff <- as.xts(DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\" & DataArticles$repost %in% input$article_overview_repost_wam),]$post_reach, order.by = DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      # \n      # jorge_rodriguez <- as.xts(DataArticles[which(DataArticles$author_status == \"Jorge Rodriguez-Jimenez\" & DataArticles$repost %in% input$article_overview_repost_wam),]$post_reach, order.by = DataArticles[which(DataArticles$author_status == \"Jorge Rodriguez-Jimenez\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      # \n      # omar_villegas <- as.xts(DataArticles[which(DataArticles$author_status == \"Omar Villegas\" & DataArticles$repost %in% input$article_overview_repost_wam),]$post_reach, order.by = DataArticles[which(DataArticles$author_status == \"Omar Villegas\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      # \n      # lucas_molandes <- as.xts(DataArticles[which(DataArticles$author_status == \"Lucas Molandes\" & DataArticles$repost %in% input$article_overview_repost_wam),]$post_reach, order.by = DataArticles[which(DataArticles$author_status == \"Lucas Molandes\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      # \n      # jessica_garcia <- as.xts(DataArticles[which(DataArticles$author_status == \"Jessica Garcia\" & DataArticles$repost %in% input$article_overview_repost_wam),]$post_reach, order.by = DataArticles[which(DataArticles$author_status == \"Jessica Garcia\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      # \n      # andrew_santiago <- as.xts(DataArticles[which(DataArticles$author_status == \"Andrew Santiago\" & DataArticles$repost %in% input$article_overview_repost_wam),]$post_reach, order.by = DataArticles[which(DataArticles$author_status == \"Andrew Santiago\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      # \n      # jason_marcus <- as.xts(DataArticles[which(DataArticles$author_status == \"Jason Marcus\" & DataArticles$repost %in% input$article_overview_repost_wam),]$post_reach, order.by = DataArticles[which(DataArticles$author_status == \"Jason Marcus\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n\n      \n      contributors <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status == \"Contributor\"& DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = DataArticles[which(DataArticles$author_status == \"Contributor\"& DataArticles$repost %in% input$article_overview_repost_wam),\"post_reach\"]), by = \"created_time\", all = TRUE)\n      contributors <- as.xts(contributors[,\"num\"], order.by = contributors[,\"created_time\"])\n\n      old_staff <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status == \"Old Staff\" & DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = DataArticles[which(DataArticles$author_status == \"Old Staff\"& DataArticles$repost %in% input$article_overview_repost_wam),\"post_reach\"]), by = \"created_time\", all = TRUE)\n      old_staff <- as.xts(old_staff[,\"num\"], order.by = old_staff[,\"created_time\"])\n\n      current_staff <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\" & DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\" & DataArticles$repost %in% input$article_overview_repost_wam),\"post_reach\"]), by = \"created_time\", all = TRUE)\n      current_staff <- as.xts(current_staff[,\"num\"], order.by = current_staff[,\"created_time\"])\n\n      jorge_rodriguez <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status == \"Jorge Rodriguez-Jimenez\" & DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = DataArticles[which(DataArticles$author_status == \"Jorge Rodriguez-Jimenez\"& DataArticles$repost %in% input$article_overview_repost_wam),\"post_reach\"]), by = \"created_time\", all = TRUE)\n      jorge_rodriguez <- as.xts(jorge_rodriguez[,\"num\"], order.by = jorge_rodriguez[,\"created_time\"])\n\n      omar_villegas <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status == \"Omar Villegas\" & DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = DataArticles[which(DataArticles$author_status == \"Omar Villegas\" & DataArticles$repost %in% input$article_overview_repost_wam),\"post_reach\"]), by = \"created_time\", all = TRUE)\n      omar_villegas <- as.xts(omar_villegas[,\"num\"], order.by = omar_villegas[,\"created_time\"])\n\n      lucas_molandes <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status == \"Lucas Molandes\" & DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = DataArticles[which(DataArticles$author_status == \"Lucas Molandes\" & DataArticles$repost %in% input$article_overview_repost_wam),\"post_reach\"]), by = \"created_time\", all = TRUE)\n      lucas_molandes <- as.xts(lucas_molandes[,\"num\"], order.by = lucas_molandes[,\"created_time\"])\n\n      jessica_garcia <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status == \"Jessica Garcia\" & DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = DataArticles[which(DataArticles$author_status == \"Jessica Garcia\" & DataArticles$repost %in% input$article_overview_repost_wam),\"post_reach\"]), by = \"created_time\", all = TRUE)\n      jessica_garcia <- as.xts(jessica_garcia[,\"num\"], order.by = jessica_garcia[,\"created_time\"])\n\n      andrew_santiago <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status == \"Andrew Santiago\" & DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = DataArticles[which(DataArticles$author_status == \"Andrew Santiago\" & DataArticles$repost %in% input$article_overview_repost_wam),\"post_reach\"]), by = \"created_time\", all = TRUE)\n      andrew_santiago <- as.xts(andrew_santiago[,\"num\"], order.by = andrew_santiago[,\"created_time\"])\n\n      jason_marcus <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$author_status == \"Jason Marcus\" & DataArticles$repost %in% input$article_overview_repost_wam),\"created_time\"], num = DataArticles[which(DataArticles$author_status == \"Jason Marcus\" & DataArticles$repost %in% input$article_overview_repost_wam),\"post_reach\"]), by = \"created_time\", all = TRUE)\n      jason_marcus <- as.xts(jason_marcus[,\"num\"], order.by = jason_marcus[,\"created_time\"])\n\n      \n      if(input$chart_general_detail == \"General\"){\n        \n        Plot_Authors_Reach_Function(contributors, old_staff, current_staff, input_chart_time, input_chart_method, input_chart_stack)\n        \n      }\n      \n      else {\n        \n        Plot_Authors_Reach_Function_Detail(contributors, old_staff, jorge_rodriguez, omar_villegas, lucas_molandes, jessica_garcia, andrew_santiago, jason_marcus, input_chart_time, input_chart_method, input_chart_stack)\n        \n      }\n\n    })\n  })\n  \n  output$PlotOverviewAuthorsWAM2 <- renderHighchart({\n    \n    input$plot_article_overview_wam\n    isolate({\n      \n      DataArticles <- DataArticles[which(DataArticles$category %in% input$article_overview_categories),]\n      DataArticles[which(DataArticles$repost == 0),]$repost <- \"Originals\"\n      DataArticles[which(DataArticles$repost == 1),]$repost <- \"Reposts\"\n      \n      input_chart_time <- tolower(input$chart_time_overview_wam)\n      input_chart_method <- tolower(input$chart_avg_total) \n      input_chart_stack <- tolower(input$chart_stack)\n      \n      contributors <- as.xts(DataArticles[which(DataArticles$author_status == \"Contributor\"& DataArticles$repost %in% input$article_overview_repost_wam),]$link_clicks, order.by = DataArticles[which(DataArticles$author_status == \"Contributor\"& DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      old_staff <- as.xts(DataArticles[which(DataArticles$author_status == \"Old Staff\"& DataArticles$repost %in% input$article_overview_repost_wam),]$link_clicks, order.by = DataArticles[which(DataArticles$author_status == \"Old Staff\"& DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      current_staff <- as.xts(DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\" & DataArticles$repost %in% input$article_overview_repost_wam),]$link_clicks, order.by = DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      jorge_rodriguez <- as.xts(DataArticles[which(DataArticles$author_status == \"Jorge Rodriguez-Jimenez\" & DataArticles$repost %in% input$article_overview_repost_wam),]$link_clicks, order.by = DataArticles[which(DataArticles$author_status == \"Jorge Rodriguez-Jimenez\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      omar_villegas <- as.xts(DataArticles[which(DataArticles$author_status == \"Omar Villegas\" & DataArticles$repost %in% input$article_overview_repost_wam),]$link_clicks, order.by = DataArticles[which(DataArticles$author_status == \"Omar Villegas\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      lucas_molandes <- as.xts(DataArticles[which(DataArticles$author_status == \"Lucas Molandes\" & DataArticles$repost %in% input$article_overview_repost_wam),]$link_clicks, order.by = DataArticles[which(DataArticles$author_status == \"Lucas Molandes\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      jessica_garcia <- as.xts(DataArticles[which(DataArticles$author_status == \"Jessica Garcia\" & DataArticles$repost %in% input$article_overview_repost_wam),]$link_clicks, order.by = DataArticles[which(DataArticles$author_status == \"Jessica Garcia\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      andrew_santiago <- as.xts(DataArticles[which(DataArticles$author_status == \"Andrew Santiago\" & DataArticles$repost %in% input$article_overview_repost_wam),]$link_clicks, order.by = DataArticles[which(DataArticles$author_status == \"Andrew Santiago\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      jason_marcus <- as.xts(DataArticles[which(DataArticles$author_status == \"Jason Marcus\" & DataArticles$repost %in% input$article_overview_repost_wam),]$link_clicks, order.by = DataArticles[which(DataArticles$author_status == \"Jason Marcus\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n     \n     \n      if(input$chart_general_detail == \"General\"){\n        \n        Plot_Authors_Clicks_Function(contributors, old_staff, current_staff, input_chart_time, input_chart_method, input_chart_stack)\n        \n      }\n      \n      else {\n        \n        Plot_Authors_Clicks_Function_Detail(contributors, old_staff, jorge_rodriguez, omar_villegas, lucas_molandes, jessica_garcia, andrew_santiago, jason_marcus, input_chart_time, input_chart_method, input_chart_stack)\n        \n      }\n      \n    })\n  })\n\n  output$PlotOverviewAuthorsWAM3 <- renderHighchart({\n    \n    input$plot_article_overview_wam\n    isolate({\n      \n      DataArticles <- DataArticles[which(DataArticles$category %in% input$article_overview_categories),]\n      DataArticles[which(DataArticles$repost == 0),]$repost <- \"Originals\"\n      DataArticles[which(DataArticles$repost == 1),]$repost <- \"Reposts\"\n      \n      input_chart_time <- tolower(input$chart_time_overview_wam)\n      input_chart_method <- tolower(input$chart_avg_total)\n      input_chart_stack <- tolower(input$chart_stack)\n      \n      contributors <- as.xts(DataArticles[which(DataArticles$author_status == \"Contributor\"& DataArticles$repost %in% input$article_overview_repost_wam),]$total_interactions, order.by = DataArticles[which(DataArticles$author_status == \"Contributor\"& DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      old_staff <- as.xts(DataArticles[which(DataArticles$author_status == \"Old Staff\"& DataArticles$repost %in% input$article_overview_repost_wam),]$total_interactions, order.by = DataArticles[which(DataArticles$author_status == \"Old Staff\"& DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      current_staff <- as.xts(DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\" & DataArticles$repost %in% input$article_overview_repost_wam),]$total_interactions, order.by = DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      jorge_rodriguez <- as.xts(DataArticles[which(DataArticles$author_status == \"Jorge Rodriguez-Jimenez\" & DataArticles$repost %in% input$article_overview_repost_wam),]$total_interactions, order.by = DataArticles[which(DataArticles$author_status == \"Jorge Rodriguez-Jimenez\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      omar_villegas <- as.xts(DataArticles[which(DataArticles$author_status == \"Omar Villegas\" & DataArticles$repost %in% input$article_overview_repost_wam),]$total_interactions, order.by = DataArticles[which(DataArticles$author_status == \"Omar Villegas\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      lucas_molandes <- as.xts(DataArticles[which(DataArticles$author_status == \"Lucas Molandes\" & DataArticles$repost %in% input$article_overview_repost_wam),]$total_interactions, order.by = DataArticles[which(DataArticles$author_status == \"Lucas Molandes\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      jessica_garcia <- as.xts(DataArticles[which(DataArticles$author_status == \"Jessica Garcia\" & DataArticles$repost %in% input$article_overview_repost_wam),]$total_interactions, order.by = DataArticles[which(DataArticles$author_status == \"Jessica Garcia\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      andrew_santiago <- as.xts(DataArticles[which(DataArticles$author_status == \"Andrew Santiago\" & DataArticles$repost %in% input$article_overview_repost_wam),]$total_interactions, order.by = DataArticles[which(DataArticles$author_status == \"Andrew Santiago\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      jason_marcus <- as.xts(DataArticles[which(DataArticles$author_status == \"Jason Marcus\" & DataArticles$repost %in% input$article_overview_repost_wam),]$total_interactions, order.by = DataArticles[which(DataArticles$author_status == \"Jason Marcus\" & DataArticles$repost %in% input$article_overview_repost_wam),]$created_time)\n      \n      # colores<- c('#D55200', '#2580B9')\n      \n      if(input$chart_general_detail == \"General\"){\n        \n        Plot_Authors_Interactions_Function(contributors, old_staff, current_staff, input_chart_time, input_chart_method, input_chart_stack)\n        \n      }\n      \n      else {\n        \n        Plot_Authors_Interactions_Function_Detail(contributors, old_staff, jorge_rodriguez, omar_villegas, lucas_molandes, jessica_garcia, andrew_santiago, jason_marcus, input_chart_time, input_chart_method, input_chart_stack)\n        \n      }\n      \n    })\n  })\n  \n  # -----------------------------------------------------------------------------------------------------------------------\n  \n  # Leaderboard -----------------------------------------------------------------------------------------------------------\n  \n  output$LeaderboardTable = DT::renderDataTable({\n    \n    input$leaderboard_apply_button\n    isolate({ \n      \n      sketch = htmltools::withTags(table(\n        \n        class = 'display',\n        thead(\n          \n          tr(\n            th(rowspan = 2, 'Author'),\n            th(colspan = 5, 'Originals'),\n            th(colspan = 5, 'Reposts'),\n            th(colspan = 5, 'Total'),\n            th(rowspan = 2, 'Status')\n          ),\n          \n          tr(\n            lapply(rep(c('Num.', '%', 'Tot.', '%', 'Avg.'), 3), th)\n            \n          )\n        )\n      ))\n      \n      \n      DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\"),]$author_status <- \"Current Staff\"\n      \n      DataArticles <- DataArticles[which(DataArticles$author_status %in% input$leaderboard_staff_select & DataArticles$category %in% input$leaderboard_categories_select & DataArticles$date >= input$leaderboard_date_range[1] & DataArticles$date<= input$leaderboard_date_range[2] & DataArticles$article_click_rank %in% input$chart_link_clicks_group_wam),]\n      \n      \n      leaderboard_table <- ddply(DataArticles, \"author\", summarize, original_posts = length(status_id[repost == 0]), original_perc = original_posts/nrow(DataArticles[which(DataArticles$repost == 0),]), original_lc = ifelse(input$leaderboard_variable_select == \"Link Clicks\", round(sum(link_clicks[repost == 0]),0), ifelse(input$leaderboard_variable_select == \"Reach\",  sum(post_reach[repost == 0]),  round(sum(total_interactions[repost == 0]),0))), original_avg_lc = ifelse(input$leaderboard_variable_select == \"Link Clicks\", round(mean(link_clicks[repost == 0]),0), ifelse(input$leaderboard_variable_select == \"Reach\",  round(mean(post_reach[repost == 0]),0),  round(mean(total_interactions[repost == 0]),0))), repost_posts = length(status_id[repost == 1]), repost_perc = repost_posts/nrow(DataArticles[which(DataArticles$repost == 1),]), repost_lc = ifelse(input$leaderboard_variable_select == \"Link Clicks\", round(sum(link_clicks[repost == 1]),0), ifelse(input$leaderboard_variable_select == \"Reach\",  round(sum(post_reach[repost == 1]),0),  round(sum(total_interactions[repost == 1]),0))), repost_avg_lc = ifelse(input$leaderboard_variable_select == \"Link Clicks\", round(mean(link_clicks[repost == 1]),0), ifelse(input$leaderboard_variable_select == \"Reach\",  round(mean(post_reach[repost == 1]),0),  round(mean(total_interactions[repost == 1]),0))), total_posts = length(status_id), total_perc = total_posts/nrow(DataArticles), total_lc =  ifelse(input$leaderboard_variable_select == \"Link Clicks\", sum(link_clicks), ifelse(input$leaderboard_variable_select == \"Reach\",  sum(post_reach),  sum(total_interactions))), total_avg_lc =  ifelse(input$leaderboard_variable_select == \"Link Clicks\", round(mean(link_clicks),0), ifelse(input$leaderboard_variable_select == \"Reach\",  round(mean(post_reach),0),  round(mean(total_interactions),0))), status = ifelse(unique(author_status) %in% c(\"Old Staff\", \"Contributor\"), unique(author_status), \"Current Staff\"))\n      \n      leaderboard_table$original_lc_perc <- leaderboard_table$original_lc/sum(leaderboard_table$original_lc)\n      leaderboard_table$repost_lc_perc <- leaderboard_table$repost_lc/sum(leaderboard_table$repost_lc)\n      leaderboard_table$total_lc_perc <- leaderboard_table$total_lc/sum(leaderboard_table$total_lc)\n      \n      leaderboard_table$original_lc <- format(leaderboard_table$original_lc, big.mark = \",\")\n      leaderboard_table$repost_lc <- format(leaderboard_table$repost_lc, big.mark = \",\")\n      leaderboard_table$total_lc <- format(leaderboard_table$total_lc, big.mark = \",\")\n      \n      leaderboard_table$original_avg_lc <- format(leaderboard_table$original_avg_lc, big.mark = \",\", digits = 1)\n      leaderboard_table$repost_avg_lc <- format(leaderboard_table$repost_avg_lc, big.mark = \",\", digits = 1)\n      leaderboard_table$total_avg_lc <- format(leaderboard_table$total_avg_lc, big.mark = \",\", digits = 1)\n      \n      \n      leaderboard_table <- leaderboard_table[,c(\"author\", \"original_posts\", \"original_perc\", \"original_lc\", \"original_lc_perc\", \"original_avg_lc\", \"repost_posts\", \"repost_perc\", \"repost_lc\", \"repost_lc_perc\", \"repost_avg_lc\", \"total_posts\", \"total_perc\", \"total_lc\", \"total_lc_perc\", \"total_avg_lc\", \"status\")]\n      \n      leaderboard_table <- leaderboard_table[order(leaderboard_table$total_lc, decreasing = TRUE), ]\n      colors <- c(brewer.pal(3, \"Paired\"))\n      \n      # stateSave=TRUE, \n      datatable(leaderboard_table, container = sketch, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(pageLength = 25, columnDefs = list(list(className = 'dt-center', targets = c(0:16))), dom = \"tip\")) %>% \n        # formatStyle(\"author\", \"status\", backgroundColor = styleEqual(c(\"Contributor\", \"Old Staff\", \"Current Staff\"), colors)) %>%\n      formatPercentage(c(\"original_perc\", \"repost_perc\",\"total_perc\",\"original_lc_perc\",\"repost_lc_perc\",\"total_lc_perc\"), 1) %>%\n      formatStyle(\n        c('original_perc', 'repost_perc', 'total_perc', 'original_lc_perc', 'repost_lc_perc','total_lc_perc'),\n        background = styleColorBar(leaderboard_table$original_perc, '#A6CEE3'),\n        backgroundSize = '100% 90%',\n        backgroundRepeat = 'no-repeat',\n        backgroundPosition = 'center'\n      )\n      # formatStyle(0:16, fontWeight = 'bold')\n    })\n    \n    \n  })\n  \n  output$LeaderboardPostsTable = DT::renderDataTable({\n    \n    input$leaderboard_apply_button\n    isolate({ \n      \n      sketch = htmltools::withTags(table(\n\n        class = 'display',\n        thead(\n\n          tr(\n            th(colspan = 5, 'Post'),\n            th(colspan = 11, 'Post Results'),\n            th(colspan = 2, 'Post Author')\n          ),\n\n          tr(\n            lapply(c(\" \", \"Image\", \"Sharetext + Headline\", \"Date\", \"Category\", \"Clicks\", \"C.T.R\", \"Reach\", \"% Fan\", \"% Viral\", \"Comments\", \"Likes\", \"Shares\", \"Interactions\", \"Intr. Rate\", \"Times Repost\", \"Author\", \"Status\"), th)\n\n          )\n        )\n      ))\n\n\n      DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\"),]$author_status <- \"Current Staff\"\n      \n      DataArticles <- DataArticles[which(DataArticles$author_status %in% input$leaderboard_staff_select & DataArticles$category %in% input$leaderboard_categories_select & DataArticles$date >= input$leaderboard_date_range[1] & DataArticles$date<= input$leaderboard_date_range[2] & DataArticles$article_click_rank %in% input$chart_link_clicks_group_wam),]\n      \n      # DataArticles <- ddply(DataArticles, \"mitu_link\", summarize, status_id = status_id[created_time == min(created_time)], sharetext = sharetext[created_time == min(created_time)], headline = headline[created_time == min(created_time)], full_picture = full_picture[created_time == min(created_time)], first_date = min(date), last_date = max(date), link_clicks = sum(link_clicks), post_reach = sum(post_reach), total_comments = sum(total_comments),  total_likes = sum(total_likes),  total_shares = sum(total_shares), total_interactions = sum(total_interactions), author = author[created_time == min(created_time)], author_status = author_status[created_time == min(created_time)], times_repost = length(mitu_link)-1)\n      \n      DataArticles$full_picture <- paste(\"<img src ='\", DataArticles$full_picture,\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"120\" width=\"120\">')\n      \n      DataArticles$headline <- paste0(\"<br><a href='\", DataArticles$permalink,\"' target='_blank'>\", DataArticles$headline,\"</a>\")\n      \n      DataArticles$share_head <- paste(DataArticles$sharetext, DataArticles$headline)\n      DataArticles$perc_fan <- round(DataArticles$post_reach_fan_unique/(DataArticles$post_reach_fan_unique+DataArticles$post_reach_viral_unique), digits = 4)\n      DataArticles$perc_viral <- round(DataArticles$post_reach_viral_unique/(DataArticles$post_reach_fan_unique+DataArticles$post_reach_viral_unique), digits = 4)\n      DataArticles$category <- as.factor(DataArticles$category)\n      DataArticles$ctr <- round(DataArticles$ctr, digits = 4)\n      DataArticles$interaction_rate <- round(DataArticles$interaction_rate, digits = 4)\n      \n      leaderboard_posts_table <- DataArticles[,c(\"full_picture\", \"share_head\", \"date\", \"category\", \"link_clicks\", \"ctr\", \"post_reach\", \"perc_fan\",\"perc_viral\", \"total_comments\", \"total_likes\", \"total_shares\", \"total_interactions\", \"interaction_rate\", \"times_repost\", \"author\", \"author_status\")]\n      \n      leaderboard_posts_table <- leaderboard_posts_table[order(leaderboard_posts_table$link_clicks, decreasing = TRUE), ]\n      \n      colors <- c(brewer.pal(3, \"Paired\"))\n      \n      datatable(cbind(' ' = '<font size=\"6\"> &#43;</font>', leaderboard_posts_table), extensions = \"Scroller\", filter = 'top',  container = sketch, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(deferRender = TRUE, scrollY = 1000, scrollX = FALSE, autoWidth = FALSE, pageLength = 100, columnDefs = list(list(visible = FALSE, targets = c(3, 4, 15, 16, 17)), list(width = \"10px\", orderable = FALSE, className = 'details-control', targets = 0), list(className = 'dt-center', targets = \"_all\")), dom = \"tip\"), callback = JS(\"\n                table.column(1).nodes().to$().css({cursor: 'pointer'});\n                              var format = function(d) {\n                              return '<table width = \\\"100%\\\" cellpadding=\\\"5\\\" cellspacing=\\\"0\\\" border=\\\"0\\\" style=\\\"padding-left:50px;\\\">'+\n                              '<tr>'+\n                              '<th>Date Posted</th>'+\n                              '<th>Category</th>'+\n                              '<th>Times Reposted</th>'+\n                              '<th>Author</th>'+\n                              '<th>Author Status</th>'+\n                              '</tr>'+\n                              '<tr>'+\n                              '<td align = \\\"center\\\">'+d[3]+'</td>'+\n                              '<td align = \\\"center\\\">'+d[4]+'</td>'+\n                              '<td align = \\\"center\\\">'+d[15]+'</td>'+\n                              '<td align = \\\"center\\\">'+d[16]+'</td>'+\n                              '<td align = \\\"center\\\">'+d[17]+'</td>'+\n                              '</tr>'+\n                              '</table>';\n                              };\n                              table.on('click', 'td.details-control', function() {\n                              var td = $(this), row = table.row(td.closest('tr'));\n                              if (row.child.isShown()) {\n                              row.child.hide();\n                              td.html('<font size=\\\"6\\\"> &#43;</font>');\n                              } else {\n                              row.child(format(row.data())).show();\n                              td.html('<font size=\\\"6\\\">&#8722;</font>');\n                              }\n                              });\"\n)) %>%\n        # formatStyle(columns = \"author_status\", target = \"row\", background = styleEqual(c(\"Contributor\", \"Old Staff\", \"Current Staff\"), colors))%>%\n        # formatStyle(0:16, fontWeight = 'bold') %>%\n        # formatDate(columns = \"created_time\", method = \"toDateString\") %>%\n        formatPercentage(c(\"perc_fan\", \"perc_viral\", \"ctr\", \"interaction_rate\"), 2) %>%\n        formatCurrency(c(\"link_clicks\", \"post_reach\", \"total_comments\", \"total_likes\", \"total_shares\", \"total_interactions\"), '', digits = 0)\n      \n    })\n  })\n  \n  # output$LeaderboardAuthorsGraph <- renderHighchart({\n  #   \n  #   input$leaderboard_apply_button\n  #   isolate({\n  #     \n  #     DataArticles[which(DataArticles$author_status != \"Old Staff\" & DataArticles$author_status != \"Contributor\"),]$author_status <- \"Current Staff\"\n  #     \n  #     DataArticles <- DataArticles[which(DataArticles$author_status %in% input$leaderboard_staff_select & DataArticles$category %in% input$leaderboard_categories_select & DataArticles$date >= input$leaderboard_date_range[1] & DataArticles$date<= input$leaderboard_date_range[2] & DataArticles$article_click_rank %in% input$chart_link_clicks_group_wam),]\n  #     \n  #     \n  #     leaderboard_table <- ddply(DataArticles, \"author\", summarize, original_posts = length(status_id[repost == 0]), original_perc = original_posts/nrow(DataArticles[which(DataArticles$repost == 0),]), original_lc = ifelse(input$leaderboard_variable_select == \"Link Clicks\", sum(link_clicks[repost == 0]), ifelse(input$leaderboard_variable_select == \"Reach\",  sum(post_reach[repost == 0]),  sum(total_interactions[repost == 0]))), repost_posts = length(status_id[repost == 1]), repost_perc = repost_posts/nrow(DataArticles[which(DataArticles$repost == 1),]), repost_lc = ifelse(input$leaderboard_variable_select == \"Link Clicks\", sum(link_clicks[repost == 1]), ifelse(input$leaderboard_variable_select == \"Reach\",  sum(post_reach[repost == 1]),  sum(total_interactions[repost == 1]))), total_posts = length(status_id), total_perc = total_posts/nrow(DataArticles), total_lc =  ifelse(input$leaderboard_variable_select == \"Link Clicks\", sum(link_clicks), ifelse(input$leaderboard_variable_select == \"Reach\",  sum(post_reach),  sum(total_interactions))), status = ifelse(unique(author_status) %in% c(\"Old Staff\", \"Contributor\"), unique(author_status), \"Current Staff\"))\n  #     \n  #     leaderboard_table <- leaderboard_table[order(leaderboard_table$total_lc, decreasing = TRUE), ]\n  #     \n  #     leaderboard_table <- leaderboard_table[1:min(40,nrow(leaderboard_table)), ]\n  #     \n  #     ds_num_originals <- lapply(1:nrow(leaderboard_table), function(x){\n  #       list(name = leaderboard_table[x,]$author, y = leaderboard_table[x,]$original_posts)\n  #     })\n  #     \n  #     ds_num_reposts <- lapply(1:nrow(leaderboard_table), function(x){\n  #       list(name = leaderboard_table[x,]$author, y = leaderboard_table[x,]$repost_posts)\n  #     })\n  #     \n  #     ds_lc_originals <- lapply(1:nrow(leaderboard_table), function(x){\n  #       list(name = leaderboard_table[x,]$author, y = leaderboard_table[x,]$original_lc)\n  #     })\n  #     \n  #     ds_lc_reposts <- lapply(1:nrow(leaderboard_table), function(x){\n  #       list(name = leaderboard_table[x,]$author, y = leaderboard_table[x,]$repost_lc)\n  #     })\n  #     \n  #     colors <- c(brewer.pal(4, \"Paired\"))\n  #     \n  #     hc <-highchart() %>%\n  #       hc_chart(type = \"column\") %>%\n  #       hc_colors(colors) %>%\n  #       # hc_title(text = \"Content Output - Monthly\", align = \"center\") %>%\n  #       hc_xAxis(type = \"category\") %>%\n  #       hc_legend(enabled = TRUE) %>%\n  #       hc_yAxis_multiples(\n  #         list(title = list(text = \"Num. of Posts\"),  lineWidth = 3),\n  #         list(title = list(text = input$leaderboard_variable_select), opposite = TRUE)) %>% \n  #       hc_add_series(data = ds_num_originals, name = \"Num. Originals\", type = \"column\") %>%\n  #       hc_add_series(data = ds_num_reposts, name = \"Num. Reposts\", type = \"column\") %>%\n  #       hc_add_series(data = ds_lc_originals, name = \"Var. Originals\", type = \"line\", yAxis = 1) %>%\n  #       hc_add_series(data = ds_lc_reposts, name = \"Var. Reposts\", type = \"line\", yAxis = 1) %>%\n  #       hc_plotOptions(\n  #         line = list(stacking = \"normal\", marker = list(enabled = TRUE)), \n  #         column = list(stacking = \"normal\", grouping = TRUE, shadow = FALSE, borderColor = \"black\")) %>%\n  #       hc_tooltip(\n  #         shared = TRUE, \n  #         pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n  #       hc_add_theme(hc_theme_smpl())\n  #     hc\n  #    \n  #    \n  #   })\n  # })\n  \n  output$LeaderboardAuthorsGraph <- renderHighchart({\n\n    author_data <- DataArticles %>%\n      group_by(author) %>%\n      summarise(n = n(), link_clicks = sum(link_clicks)) %>%\n      arrange(-n, -link_clicks)\n    \n    ds_author_data <- lapply(1:nrow(author_data), function(x){\n      list(name = author_data[x,]$author, value = author_data[x,]$n, colorValue = author_data[x,]$link_clicks)\n    })\n    \n    \n    hc <-highchart() %>%\n      # hc_chart(zoomType = \"xy\") %>%\n      hc_colorAxis(minColor = '#FFFFFF', maxColor = JS(\"Highcharts.getOptions().colors[0]\")) %>%\n      hc_add_series(data = ds_author_data, type = \"treemap\") %>%\n      hc_plotOptions(treemap = list(borderColor = \"black\")) %>%\n      # hc_tooltip(pointFormat = \"{series.name}: <b>{point.colorValue}</b><br/>\")%>% \n      # hc_tooltip(formatter = JS(\"function(){ return '<div><b>' + this.point.name + '</b><br/>' + 'Num. of Posts: <b>' + this.point.value + '</b><br/>' + 'Link Clicks: <b>' + this.point.colorValue + '</b></div>'}\"))%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n    # \"function(){ return '<div><b>' + this.point.name + '</b>' + '<b>' this.point.colorValue '</b></div>'}\"\n    \n    # fntltp <- JS(paste(\"function(){\n    #                    return\", '\"',\"<div style='width: 250px; white-space:normal;'>\", '\"', \"+ 'Share text: <b>' + this.point.share_text + '</b>' + '<br/>' + '<img src ='\", \"+ this.point.photo_url +\",\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"250\" width=\"250\">', \"'+ '<br/><b>' + this.point.name + ' | Times Reposted: </b>' + this.point.times_repo + '<br/>Reach: <b>' + this.point.reach + '</b> | Rank: <b>' + this.point.rank_reach + '</b> | Gen. Rank: <b>' + this.point.general_rank_reach + '</b><br/>Interactions: <b>' + this.point.interactions + '</b> | Rank: <b>' + this.point.rank_interactions + '</b> | Gen. Rank: <b>' + this.point.general_rank_interactions + '</b></div>'\",\n    #                    \"}\"))\n\n\n  })\n  \n  \n  \n   \n  # -----------------------------------------------------------------------------------------------------------------------\n  \n  # Categories ------------------------------------------------------------------------------------------------------------\n  \n  output$LeaderboardCategoriesGraph <- renderHighchart({\n    \n    input$category_author_select_button\n    isolate({\n      \n      DataArticles <- DataArticles[which(DataArticles$author %in% input$category_author_cs_select | DataArticles$author %in% input$category_author_os_select | DataArticles$author %in% input$category_author_c_select),]\n      \n      categories_data <- ddply(DataArticles, \"category\", summarize, avg_viral = round(mean(post_reach_viral_unique), 2), avg_fan = round(mean(post_reach_fan_unique), 2), avg_reach = round(mean(post_reach), 2))\n      \n      categories_data <- categories_data[order(categories_data$avg_reach, decreasing = TRUE), ]\n      \n      ds_viral <- lapply(1:nrow(categories_data), function(x){\n        list(name = categories_data[x,]$category, y = categories_data[x,]$avg_viral)\n      })\n      \n      ds_fan <- lapply(1:nrow(categories_data), function(x){\n        list(name = categories_data[x,]$category, y = categories_data[x,]$avg_fan)\n      })\n      \n      ds_reach <- lapply(1:nrow(categories_data), function(x){\n        list(name = categories_data[x,]$category, y = categories_data[x,]$avg_reach)\n      })\n      \n      colors <- c(brewer.pal(3, \"Paired\"))\n      \n      hc <-highchart() %>%\n        hc_chart(type = \"column\") %>%\n        hc_colors(colors) %>%\n        hc_title(text = \"Reach\", align = \"left\", style = list(fontSize = \"25px\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_yAxis_multiples(\n          list(title = list(text = \"%\"),  lineWidth = 3),\n          list(title = list(text = \"Reach\"), opposite = TRUE)) %>% \n        hc_add_series(data = ds_viral, name = \"Avg. Viral\", type = \"column\") %>%\n        hc_add_series(data = ds_fan, name = \"Avg. Fan\", type = \"column\") %>%\n        hc_add_series(data = ds_reach, name = \"Avg. Reach\", type = \"line\", yAxis = 1) %>%\n        hc_plotOptions(\n          line = list(stacking = \"none\", marker = list(enabled = TRUE)), \n          column = list(stacking = \"percent\", grouping = TRUE, shadow = FALSE, borderColor = \"black\")) %>%\n        hc_tooltip(\n          shared = TRUE, \n          pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  output$CategoriesReachGraph <- renderHighchart({\n    \n    input$category_author_select_button\n    isolate({\n      \n      DataArticles <- DataArticles[which(DataArticles$author %in% input$category_author_cs_select | DataArticles$author %in% input$category_author_os_select | DataArticles$author %in% input$category_author_c_select),]\n      \n      categories_data <- ddply(DataArticles, \"category\", summarize, original_posts = length(status_id[repost == 0]), repost_posts = length(status_id[repost == 1]), original_lc = sum(post_reach[repost == 0]), repost_lc = sum(post_reach[repost == 1]))\n      \n      categories_data <- categories_data[order(categories_data$original_lc + categories_data$repost_lc, decreasing = TRUE), ]\n      \n      ds_num_originals <- lapply(1:nrow(categories_data), function(x){\n        list(name = categories_data[x,]$category, y = categories_data[x,]$original_posts)\n      })\n      \n      ds_num_reposts <- lapply(1:nrow(categories_data), function(x){\n        list(name = categories_data[x,]$category, y = categories_data[x,]$repost_posts)\n      })\n      \n      ds_lc_originals <- lapply(1:nrow(categories_data), function(x){\n        list(name = categories_data[x,]$category, y = categories_data[x,]$original_lc)\n      })\n      \n      ds_lc_reposts <- lapply(1:nrow(categories_data), function(x){\n        list(name = categories_data[x,]$category, y = categories_data[x,]$repost_lc)\n      })\n      \n      colors <- c(brewer.pal(4, \"Paired\"))\n      \n      hc <-highchart() %>%\n        hc_chart(type = \"column\") %>%\n        hc_colors(colors) %>%\n        hc_title(text = \"Reach\", align = \"left\", style = list(fontSize = \"25px\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_yAxis_multiples(\n          list(title = list(text = \"Num. of Posts\"),  lineWidth = 3),\n          list(title = list(text = \"Reach\"), opposite = TRUE)) %>% \n        hc_add_series(data = ds_num_originals, name = \"Num. Originals\", type = \"column\") %>%\n        hc_add_series(data = ds_num_reposts, name = \"Num. Reposts\", type = \"column\") %>%\n        hc_add_series(data = ds_lc_originals, name = \"Var. Originals\", type = \"line\", yAxis = 1) %>%\n        hc_add_series(data = ds_lc_reposts, name = \"Var. Reposts\", type = \"line\", yAxis = 1) %>%\n        hc_plotOptions(\n          line = list(stacking = \"normal\", marker = list(enabled = TRUE)), \n          column = list(stacking = \"normal\", grouping = TRUE, shadow = FALSE, borderColor = \"black\")) %>%\n        hc_tooltip(\n          shared = TRUE, \n          pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  output$CategoriesLinkClicksGraph <- renderHighchart({\n    \n    input$category_author_select_button\n    isolate({\n      \n      DataArticles <- DataArticles[which(DataArticles$author %in% input$category_author_cs_select | DataArticles$author %in% input$category_author_os_select | DataArticles$author %in% input$category_author_c_select),]\n      \n      categories_data <- ddply(DataArticles, \"category\", summarize, original_posts = length(status_id[repost == 0]), repost_posts = length(status_id[repost == 1]), original_lc = sum(link_clicks[repost == 0]), repost_lc = sum(link_clicks[repost == 1]))\n      \n      categories_data <- categories_data[order(categories_data$original_lc + categories_data$repost_lc, decreasing = TRUE), ]\n      \n      ds_num_originals <- lapply(1:nrow(categories_data), function(x){\n        list(name = categories_data[x,]$category, y = categories_data[x,]$original_posts)\n      })\n      \n      ds_num_reposts <- lapply(1:nrow(categories_data), function(x){\n        list(name = categories_data[x,]$category, y = categories_data[x,]$repost_posts)\n      })\n      \n      ds_lc_originals <- lapply(1:nrow(categories_data), function(x){\n        list(name = categories_data[x,]$category, y = categories_data[x,]$original_lc)\n      })\n      \n      ds_lc_reposts <- lapply(1:nrow(categories_data), function(x){\n        list(name = categories_data[x,]$category, y = categories_data[x,]$repost_lc)\n      })\n      \n      colors <- c(brewer.pal(4, \"Paired\"))\n      \n      hc <-highchart() %>%\n        hc_chart(type = \"column\") %>%\n        hc_colors(colors) %>%\n        hc_title(text = \"Link Clicks\", align = \"left\", style = list(fontSize = \"25px\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_yAxis_multiples(\n          list(title = list(text = \"Num. of Posts\"),  lineWidth = 3),\n          list(title = list(text = \"Link Clicks\"), opposite = TRUE)) %>% \n        hc_add_series(data = ds_num_originals, name = \"Num. Originals\", type = \"column\") %>%\n        hc_add_series(data = ds_num_reposts, name = \"Num. Reposts\", type = \"column\") %>%\n        hc_add_series(data = ds_lc_originals, name = \"Var. Originals\", type = \"line\", yAxis = 1) %>%\n        hc_add_series(data = ds_lc_reposts, name = \"Var. Reposts\", type = \"line\", yAxis = 1) %>%\n        hc_plotOptions(\n          line = list(stacking = \"none\", marker = list(enabled = TRUE)), \n          column = list(stacking = \"normal\", grouping = TRUE, shadow = FALSE, borderColor = \"black\")) %>%\n        hc_tooltip(\n          shared = TRUE, \n          pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n  output$CategoriesEngagementsGraph <- renderHighchart({\n    \n    input$category_author_select_button\n    isolate({\n      \n      DataArticles <- DataArticles[which(DataArticles$author %in% input$category_author_cs_select | DataArticles$author %in% input$category_author_os_select | DataArticles$author %in% input$category_author_c_select),]\n      \n      categories_data <- ddply(DataArticles, \"category\", summarize, original_posts = length(status_id[repost == 0]), repost_posts = length(status_id[repost == 1]), original_lc = sum(total_interactions[repost == 0]), repost_lc = sum(total_interactions[repost == 1]))\n      \n      categories_data <- categories_data[order(categories_data$original_lc + categories_data$repost_lc, decreasing = TRUE), ]\n      \n      ds_num_originals <- lapply(1:nrow(categories_data), function(x){\n        list(name = categories_data[x,]$category, y = categories_data[x,]$original_posts)\n      })\n      \n      ds_num_reposts <- lapply(1:nrow(categories_data), function(x){\n        list(name = categories_data[x,]$category, y = categories_data[x,]$repost_posts)\n      })\n      \n      ds_lc_originals <- lapply(1:nrow(categories_data), function(x){\n        list(name = categories_data[x,]$category, y = categories_data[x,]$original_lc)\n      })\n      \n      ds_lc_reposts <- lapply(1:nrow(categories_data), function(x){\n        list(name = categories_data[x,]$category, y = categories_data[x,]$repost_lc)\n      })\n      \n      colors <- c(brewer.pal(4, \"Paired\"))\n      \n      hc <-highchart() %>%\n        hc_chart(type = \"column\") %>%\n        hc_colors(colors) %>%\n        hc_title(text = \"Engagements\", align = \"left\", style = list(fontSize = \"25px\")) %>%\n        hc_xAxis(type = \"category\") %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_yAxis_multiples(\n          list(title = list(text = \"Num. of Posts\"),  lineWidth = 3),\n          list(title = list(text = \"Engagements\"), opposite = TRUE)) %>% \n        hc_add_series(data = ds_num_originals, name = \"Num. Originals\", type = \"column\") %>%\n        hc_add_series(data = ds_num_reposts, name = \"Num. Reposts\", type = \"column\") %>%\n        hc_add_series(data = ds_lc_originals, name = \"Var. Originals\", type = \"line\", yAxis = 1) %>%\n        hc_add_series(data = ds_lc_reposts, name = \"Var. Reposts\", type = \"line\", yAxis = 1) %>%\n        hc_plotOptions(\n          line = list(stacking = \"none\", marker = list(enabled = TRUE)), \n          column = list(stacking = \"normal\", grouping = TRUE, shadow = FALSE, borderColor = \"black\")) %>%\n        hc_tooltip(\n          shared = TRUE, \n          pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n      \n    })\n  })\n  \n}\n\n\n# SHINY APP =========================================================================================================================\n\nshinyApp(ui = ui, server = server)",
    "created" : 1502300155866.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "927480677",
    "id" : "D4D24372",
    "lastKnownWriteTime" : 1498255726,
    "last_content_update" : 1498255726,
    "path" : "~/CreatorsContent App/app.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}