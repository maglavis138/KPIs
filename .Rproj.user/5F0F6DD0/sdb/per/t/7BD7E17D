{
    "collab_server" : "",
    "contents" : "# LIBRARIES ========================================================================================================================\n\nlibrary(ggplot2)\nlibrary(reshape)\nlibrary(scales)\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(viridis)\nlibrary(ggthemes)\nlibrary(RColorBrewer)\nlibrary(highcharter)\nlibrary(quantmod)\nlibrary(dtplyr)\nlibrary(data.table)\nlibrary(readr)\nlibrary(lubridate)\nlibrary(MASS)\nlibrary(fitdistrplus)\n# library(jsonlite)\n\n# DATA LOAD ========================================================================================================================\n\noptions(scipen = 999)\n\n# LinkData <- read.csv(\"data/LinkData.csv\", header = TRUE, stringsAsFactors = FALSE)\n# VideoData <- read.csv(\"data/VideoData.csv\", header = TRUE, stringsAsFactors = FALSE)\n# PhotoData <- read.csv(\"data/PhotoData.csv\", header = TRUE, stringsAsFactors = FALSE)\n\nlibrary(RMySQL)\nmydb = dbConnect(MySQL(), host = \"104.198.210.36\", user = \"root\", password = \"tacozombies54992\", db = \"analytics\")\n\nrs <- dbSendQuery(mydb, \"select * from PAGE_DATA where from_name = 'We are mitu'\")\nWamPageData <- fetch(rs, -1)\n\n# rs <- dbSendQuery(mydb, \"select * from FEED_DATA\")\n# WamFeedData <- fetch(rs, -1)\n# \n# rs <- dbSendQuery(mydb, \"select * from POST_DATA\")\n# WamPostData <- fetch(rs, -1)\n# \n# rs <- dbSendQuery(mydb, \"select * from CONTENT_TRACK\")\n# ContentTrackData <- fetch(rs, -1)\n# \n# rs <- dbSendQuery(mydb, \"select * from EDITORIAL_AUTHOR\")\n# EditorialData <- fetch(rs, -1)\n\ndbClearResult(rs)\ndbDisconnect(mydb)\n\nWamPageData$date <- as.Date(WamPageData$date)\n# WamFeedData$date <- as.Date(WamFeedData$date)\n# WamPostData$date <- as.Date(WamPostData$date)\n\n# Data <- merge(WamFeedData, WamPostData, by = \"status_id\", all.x = TRUE)\n\n\nload(\"data/DataArticles.Rda\")\nload(\"data/DataVideos.Rda\")\nload(\"data/DataPhotos.Rda\")\nload(\"data/PostData.Rda\")\n\nDataGoals <- read.csv(\"data/WAM KPIs 2017.csv\", header = TRUE, stringsAsFactors = FALSE)\nDataGoals$date <- strptime(DataGoals$date, \"%d/%m/%Y\")\n\nhcoptslang <- getOption(\"highcharter.lang\")\nhcoptslang$thousandsSep <- \",\"\noptions(highcharter.lang = hcoptslang)\n\n# Data <- Data[!duplicated(Data),]\n# Data$created_time <- as.POSIXct(strptime(Data$created_time, \"%Y-%m-%d %H:%M\"), tz = \"GMT\")\n# # Data$date = strptime(Data$date, \"%d/%m/%Y\")\n# Data$date <- as.Date(Data$date)\n# # Data[Data$sharetext == \"\",]$sharetext <- \"No Share Text\"\n# Data[Data$sharetext == \"\",]$sharetext <- as.character(Data[Data$sharetext == \"\",]$status_id)\n# Data[Data$headline == \"\",]$headline <- as.character(Data[Data$headline == \"\",]$status_id)\n# Encoding(Data$sharetext) <- \"latin1\"\n# Encoding(Data$headline) <- \"latin1\"\n# Data$total_interactions <- Data$total_comments+Data$total_likes + Data$total_shares\n# Data$interaction_rate <- (Data$total_comments+Data$total_likes + Data$total_shares)/Data$post_reach\n# Data$ctr <- Data$link_clicks/Data$post_reach\n# Data$views_rate <- Data$post_video_views/Data$post_reach\n# Data$viral_fan_rate <- Data$post_reach_viral/Data$post_reach_fan\n# Data$share_rate <- Data$total_shares/(Data$total_comments + Data$total_likes + Data$total_shares)\n# Data$total_reactions <- (Data$feed_likes + Data$love + Data$wow + Data$haha + Data$sad + Data$angry)\n# Data$feed_likes_rate <- round(Data$feed_likes/Data$total_reactions, 4)\n# Data$love_rate <- round(Data$love/Data$total_reactions, 4)\n# Data$wow_rate <- round(Data$wow/Data$total_reactions, 4)\n# Data$haha_rate <- round(Data$haha/Data$total_reactions, 4)\n# Data$sad_rate <- round(Data$sad/Data$total_reactions, 4)\n# Data$angry_rate <- round(Data$angry/Data$total_reactions, 4)\n# Data$viral_rate <- (Data$post_reach_viral/(Data$post_reach_fan + Data$post_reach_viral))\n# Data$fan_rate <- (Data$post_reach_fan/(Data$post_reach_fan + Data$post_reach_viral))\n# Data$post_image <- paste(\"<img src ='\", Data$full_picture,\"'\",'title=\"\"', 'alt=\"\" border=\"0\" height=\"100\" width=\"100\">')\n# \n# DataArticles <- Data[Data$post_type == \"link\",]\n# DataArticles <- merge(DataArticles, EditorialData, by = \"status_id\", all.x = TRUE)\n# DataArticles <- merge(DataArticles[,], LinkData[,c(\"status_id\", \"mitu_link\", \"category\", \"sponsored\", \"reposted\", \"original\", \"repost\", \"repost_order\", \"times_repost\", \"days_bet_repost\")])\n# DataArticles <- ddply(DataArticles, \"mitu_link\", transform, average_ctr = mean(ctr), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_link_clicks = mean(link_clicks))\n# \n# DataArticles$author_status <- ifelse(!(DataArticles$author %in% c(\"Jorge Rodriguez-Jimenez\", \"Omar Villegas\", \"Lucas Molandes\", \"Jessica Garcia\", \"Andrew Santiago\", \"Jason Marcus\")), \"Contributor\", DataArticles$author)\n# \n# DataArticles$author_status <- ifelse(DataArticles$author %in% c(\"mitÃº Staff\", \"Adriana Venegas\", \"Fidel Martinez\", \"Alex Alvarez\", \"Wendy Barba\"), \"Old Staff\", DataArticles$author_status)\n# \n# DataVideos <- Data[Data$post_type == \"video\",]\n# DataVideos <- merge(DataVideos[,], VideoData[,c(\"status_id\", \"video_repost_sharetext\", \"video_meme\", \"series\", \"category\", \"format\", \"sponsored\", \"reposted\", \"original\", \"repost\", \"repost_order\", \"times_repost\", \"days_bet_repost\")])\n# DataVideos <- ddply(DataVideos, \"video_repost_sharetext\", transform, average_views_rate = mean(views_rate), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_video_views = mean(post_video_views), average_viral_fan_rate = mean(viral_fan_rate))\n# # DataVideos$created_time <- as.POSIXct(strptime(DataVideos$created_time, \"%d/%m/%Y %H:%M\"), tz = \"GMT\")\n# \n# DataPhotos <- Data[Data$post_type == \"photo\",]\n# DataPhotos <- merge(DataPhotos[,],PhotoData[,c(\"status_id\", \"image_text_py\", \"reposted\", \"original\", \"repost\", \"repost_order\", \"times_repost\", \"days_bet_repost\")])\n# DataPhotos <- ddply(DataPhotos, \"image_text_py\", transform, average_share_rate = mean(share_rate), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_viral_fan_rate = mean(viral_fan_rate))\n# # DataPhotos$created_time <- as.POSIXct(strptime(DataPhotos$created_time, \"%d/%m/%Y %H:%M\"), tz = \"GMT\")\n\nplot_histogram <- function(data, x_var, title){\n  \n  hist(data, # histogram\n       col = \"peachpuff\", # column color\n       border = \"black\", \n       prob = FALSE, # show densities instead of frequencies\n       breaks = 200,\n       xlab = x_var,\n       main = paste(title, x_var),\n       xaxt='n')\n\n  # lines(density(data), # density plot\n  #       lwd = 2, # thickness of line\n  #       col = \"chocolate3\")\n  # \n  \n  abline(v = quantile(data, probs = 0.05),\n         col = \"blue\",\n         lwd = 2)\n  \n  abline(v = mean(data),\n         col = \"royalblue\",\n         lwd = 2)\n  \n  abline(v = median(data),\n         col = \"red\",\n         lwd = 2)\n  \n  abline(v = quantile(data, probs = 0.95),\n         col = \"green\",\n         lwd = 2)\n  \n  # quantile(DataArticles$link_clicks, probs = c(0.05, 0.95))\n  \n  legend(x = \"topright\", # location of legend within plot area\n         c(paste(\"P < 5%: \", formatC(quantile(data, probs = c(0.05)), format=\"d\", big.mark=',')), paste(\"Mean: \", formatC(mean(data), format=\"d\", big.mark=',')), paste(\"Median: \", formatC(median(data), format=\"d\", big.mark=',')), paste(\"P < 95%: \", formatC(quantile(data, probs = c(0.95)), format=\"d\", big.mark=','))),\n         col = c(\"blue\", \"royalblue\", \"red\", \"green\"),\n         lwd = c(2, 2))\n  \n  axis(side=1, at = axTicks(1), \n       labels = formatC(axTicks(1), format=\"d\", big.mark=','))\n}\n\n\n# UI ================================================================================================================================\n\n\nui <- dashboardPage(skin = \"blue\",\n                    \n                    # Dashboard Header ------------------------------------------------------------------------------------------------------------------     \n                    \n                    dashboardHeader(title = \"KPIs\"),\n                    \n                    # Dashboard Sidebar -----------------------------------------------------------------------------------------------------------------\n                    \n                    dashboardSidebar(\n                      \n                      tags$head(tags$style(HTML(\".sidebar { height: 200vh; }\"))),\n                      \n                      sidebarMenu(\n                        \n                        menuItem(\"We are Mitú\", tabName = \"wam\", icon = icon(\"fa fa-file-text-o\")),\n                        menuItem(\"We are Mitú Goals Model\", tabName = \"wam_goals_model\", icon = icon(\"fa fa-file-text-o\"))\n                        \n                      )\n                    ),\n                    \n                    # Dashboard Body --------------------------------------------------------------------------------------------------------------------               \n                    dashboardBody(fluidRow(\n                      \n                      tabItems(\n                        \n                        #  1. Articles WAM -----------------------------------------------------------------------------------------------------------   \n                        \n                        tabItem(tabName = \"wam\", fluidRow(\n                          \n                          tabBox( title = \"\",\n                                  \n                                  \n                                  #  1.1 Articles Repost Suggestions ------------------------------------------------------------------------------------\n                                  tabPanel(\"We Are Mitú\",\n                                           \n                                           tabsetPanel(\n                                             \n                                             tabPanel(\"Page Data\",\n                                                      \n                                                      box(title = \"Content Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                          column(12, selectizeInput(inputId = \"kpis_year_content_output\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisContentOutputMonth\")),\n                                                          \n                                                          column(12, DT::dataTableOutput(\"PlotKpisContentOutputTable\")),\n                                                          \n                                                          column(12, br()),\n                                                          \n                                                          column(12, selectizeInput(inputId = \"kpis_month_content_output\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisContentOutput\"))\n                                                      ),\n                                                      \n                                                      box(title = \"Total Content Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                          column(12, selectizeInput(inputId = \"kpis_year_content_views\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisContentViewsMonth\")),\n                                                          \n                                                          column(12, DT::dataTableOutput(\"PlotKpisContentViewsTable\")),\n                                                          \n                                                          column(12, br()),\n                                                          \n                                                          column(12, \n                                                                 # column(8, highchartOutput(\"PlotKpisContentViewsTitle\", height = 30)),\n                                                                 column(12, selectizeInput(inputId = \"kpis_month_content_views\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                                          ),\n                                                          column(12, highchartOutput(\"PlotKpisContentViews\"))\n                                                          \n                                                      ),\n                                                      \n                                                      box(title = \"Total Followers\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                          column(12, selectizeInput(inputId = \"kpis_year_total_followers\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                          column(12, highchartOutput(\"PlotKpisTotalFollowers\")),\n                                                          column(12, DT::dataTableOutput(\"PlotKpisTotalFollowersTable\"))\n                                                          \n                                                      ),\n                                                      \n                                                      box(title = \"New Followers\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                          column(12, selectizeInput(inputId = \"kpis_year_new_followers\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisNewFollowersMonth\")),\n                                                          column(12, DT::dataTableOutput(\"PlotKpisNewFollowersTable\")),\n                                                          \n                                                          column(12, br()),\n                                                          \n                                                          # column(12, highchartOutput(\"PlotKpisNewFollowersTitle\", height = 30)),\n                                                          column(6, selectizeInput(inputId = \"kpis_month_new_followers\", label = \"Month:\", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                                          column(6, selectizeInput(inputId = \"kpis_chart_type_new_followers\", label = \"Chart: \", choices = c(\"waterfall\", \"column\"), selected = \"waterfall\")),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisNewFollowers\"))\n                                                          \n                                                      )\n                                                      \n\n\n                                                      # \n                                                      # box(title = \"Meme Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                      #     \n                                                      #     column(12, selectizeInput(inputId = \"kpis_year_meme_output\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                      #     \n                                                      #     column(12, highchartOutput(\"PlotKpisMemeContentOutputMonth\")),\n                                                      #     \n                                                      #     column(12, DT::dataTableOutput(\"PlotKpisMemeContentOutputTable\")),\n                                                      #     column(12, \n                                                      #            column(8, highchartOutput(\"PlotKpisMemeContentOutputTitle\", height = 30)),\n                                                      #            column(4, selectizeInput(inputId = \"kpis_month_meme_content_output\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                                      #     ),\n                                                      #     column(12, highchartOutput(\"PlotKpisMemeContentOutput\"))\n                                                      # )\n                                             ),\n                                             \n                                             \n                                             tabPanel(\"Articles\",\n                                                      \n                                                      box(title = \"Article Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                          column(12, selectizeInput(inputId = \"kpis_year_article_output\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisArticleContentOutputMonth\")),\n                                                          column(12, DT::dataTableOutput(\"PlotKpisArticleContentOutputTable\")),\n                                                          \n                                                          column(12, br()),\n                                                          \n                                                          column(12, selectizeInput(inputId = \"kpis_month_article_content_output\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisArticleContentOutput\"))\n                                                          \n                                                      ),\n                                                      \n                                                      box(title = \"Link Clicks\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                          column(12, selectizeInput(inputId = \"kpis_year_articles\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisArticlesMonth\")),\n                                                          \n                                                          column(12, DT::dataTableOutput(\"PlotKpisArticlesTable\")),\n                                                          \n                                                          column(12, br()),\n                                                          \n                                                          column(4, selectizeInput(inputId = \"kpis_month_articles\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                                          column(4, selectizeInput(inputId = \"articles_kpi_select_variable\", label = \"Show: \", choices = c(\"Content Views\", \"Interactions\", \"Reach\"), selected = \"Content Views\")),\n                                                          \n                                                          column(4, selectizeInput(inputId = \"articles_kpi_select_repost\", label = \"Posts: \", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisArticles\")))\n                                                      \n                                             ),\n                                             \n                                             tabPanel(\"Videos\",\n                                                      \n                                                      #DIVIDIR VIDEOS DE VIDEO MEMES OUTPUT\n                                                      \n                                                      box(title = \"Video Output\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                          column(12, selectizeInput(inputId = \"kpis_year_video_output\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisVideoContentOutputMonth\")),\n                                                          \n                                                          column(12, DT::dataTableOutput(\"PlotKpisVideoContentOutputTable\")),\n                                                          column(12,\n                                                                 column(8, highchartOutput(\"PlotKpisVideoContentOutputTitle\", height = 30)),\n                                                                 column(4, selectizeInput(inputId = \"kpis_month_video_content_output\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                                          ),\n                                                          column(12, highchartOutput(\"PlotKpisVideoContentOutput\"))\n                                                          \n                                                      ),\n                                                      \n                                                      \n                                                      box(title = \"Video Views\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                          column(12, selectizeInput(inputId = \"kpis_year_videos\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisVideosMonth\")),\n                                                          \n                                                          column(12, DT::dataTableOutput(\"PlotKpisVideosTable\")),\n                                                          \n                                                          column(12, br()),\n                                                          \n                                                          column(4, selectizeInput(inputId = \"kpis_month_videos\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                                          column(4, selectizeInput(inputId = \"videos_kpi_select_variable\", label = \"Show: \", choices = c(\"Content Views\", \"Interactions\", \"Reach\"), selected = \"Content Views\")),\n                                                          \n                                                          column(4, selectizeInput(inputId = \"videos_kpi_select_repost\", label = \"Posts: \", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisVideos\")))\n                                                     \n                                                      \n                                                      # box(title = \"All Videos\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                      #     column(12, selectizeInput(inputId = \"kpis_year_all_videos\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                      #     \n                                                      #     column(12, highchartOutput(\"PlotKpisAllVideosMonth\")),\n                                                      #     \n                                                      #     column(12, DT::dataTableOutput(\"PlotKpisAllVideosTable\")),\n                                                      #     \n                                                      #     column(12, br()),\n                                                      #     \n                                                      #     column(4, selectizeInput(inputId = \"kpis_month_all_videos\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                                      #     column(4, selectizeInput(inputId = \"all_videos_kpi_select_variable\", label = \"Show: \", choices = c(\"Content Views\", \"Interactions\", \"Reach\"), selected = \"Content Views\")),\n                                                      #     \n                                                      #     column(4, selectizeInput(inputId = \"all_videos_kpi_select_repost\", label = \"Posts: \", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                      #     \n                                                      #     column(12, highchartOutput(\"PlotKpisAllVideos\"))),\n                                                      \n                                                      \n                                             ),\n                                             \n                                             tabPanel(\"Video Memes\",\n                                               \n                                                      box(title = \"Video Memes\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                          column(12, selectizeInput(inputId = \"kpis_year_video_memes\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisVideoMemesMonth\")),\n                                                          \n                                                          column(12, DT::dataTableOutput(\"PlotKpisVideoMemesTable\")),\n                                                          \n                                                          column(12, br()),\n                                                          \n                                                          column(4, selectizeInput(inputId = \"kpis_month_video_memes\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                                          column(4, selectizeInput(inputId = \"video_memes_kpi_select_variable\", label = \"Show: \", choices = c(\"Content Views\", \"Interactions\", \"Reach\"), selected = \"Content Views\")),\n                                                          \n                                                          column(4, selectizeInput(inputId = \"video_memes_kpi_select_repost\", label = \"Posts: \", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisVideoMemes\")))\n                                               \n                                             ),\n                                             \n                                             tabPanel(\"Memes\",\n                                                      \n                                                      box(title = \"Memes\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                          column(12, selectizeInput(inputId = \"kpis_year_memes\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisMemesMonth\")),\n                                                          \n                                                          column(12, DT::dataTableOutput(\"PlotKpisMemesTable\")),\n                                                          \n                                                          column(12, br()),\n                                                          \n                                                          column(4, selectizeInput(inputId = \"kpis_month_memes\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\"))),\n                                                          column(4, selectizeInput(inputId = \"memes_kpi_select_variable\", label = \"Show: \", choices = c(\"Content Views\", \"Interactions\"), selected = \"Content Views\")),\n                                                          \n                                                          column(4, selectizeInput(inputId = \"memes_kpi_select_repost\", label = \"Posts: \", choices = c(\"All\", \"Originals\", \"Reposts\"), selected = \"All\")),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisMemes\")))\n                                                      \n                                             ),\n                                             \n                                             tabPanel(\"Reach & Engagement\",\n                                                      \n                                                      box(title = \"Reach\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                          column(12, selectizeInput(inputId = \"kpis_year_reach\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisReachMonth\")),\n                                                          column(12, \n                                                                 column(8, highchartOutput(\"PlotKpisReachTitle\", height = 30)),\n                                                                 column(4, selectizeInput(inputId = \"kpis_month_reach\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                                          ),\n                                                          column(12, highchartOutput(\"PlotKpisReach\"))\n                                                      ),\n                                                      \n                                                      box(title = \"Engagement\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 6,\n                                                          column(12, selectizeInput(inputId = \"kpis_year_engagement\", label = \"Year: \", choices = as.character(seq(as.numeric(format(range(Data$date)[1], \"%Y\")),as.numeric(format(range(Data$date)[2], \"%Y\")), by = 1)), selected = format(Sys.Date(), \"%Y\"))),\n                                                          \n                                                          column(12, highchartOutput(\"PlotKpisEngagementMonth\")),\n                                                          column(12, \n                                                                 column(8, highchartOutput(\"PlotKpisEngagementTitle\", height = 30)),\n                                                                 column(4, selectizeInput(inputId = \"kpis_month_engagement\", label = \"Month: \", choices = as.character(format(seq(range(Data$date)[1], range(Data$date)[2], by = \"month\"), \"%b %Y\")), selected = format(Sys.Date(), \"%b %Y\")))\n                                                          ),\n                                                          column(12, highchartOutput(\"PlotKpisEngagement\"))\n                                                          \n                                                      )\n                                                      \n                                             ))\n                                  )\n                                  \n                                  , width = 12))),\n                        \n                        tabItem(tabName = \"wam_goals_model\", fluidRow(\n                          \n                          tabBox( title = \"\",\n                                  \n                                  tabPanel(\"We Are Mitú\",\n                                           \n                                           box(title = \"Model Controls\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                               column(12, dateRangeInput('model_date_range',label = \"Date Range\", start = range(Data$date)[2]-60, end = range(Data$date)[2], min = \"2015-10-01\", max = range(Data$date)[2])\n                                                      ),\n                                               column(3, numericInput(\"model_num_articles\", label = \"Articles Originals\", value = 155)),\n                                               column(3, numericInput(\"model_num_articles_reposts\", label = \"Articles Reposts\", value = 50)),\n                                               column(3, numericInput(\"model_num_videos\", label = \"Video Originals\", value = 62)),\n                                               column(3, numericInput(\"model_num_videos_reposts\", label = \"Video Reposts\", value = 25)),\n                                               column(3, numericInput(\"model_num_video_memes\", label = \"Video Meme Originals\", value = 62)),\n                                               column(3, numericInput(\"model_num_video_memes_reposts\", label = \"Video Meme Reposts\", value = 25)),\n                                               column(3, numericInput(\"model_num_memes\", label = \"Memes Originals\", value = 186)),\n                                               column(3, numericInput(\"model_num_memes_reposts\", label = \"Memes Reposts\", value = 100)),\n                                               column(3, numericInput(\"model_num_simulations\", label = \"Number of Simulations\", value = 10000)),\n                                               column(3, actionButton(inputId = \"model_simulation_button\", label = \"Simulate\", width = \"100%\", style = \"height:60px\"))\n                                           ),\n                                           \n                                           box(title = \"Content Distributions\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                               tabBox( title = \"\",\n                                                       \n                                                       tabPanel(\"Articles\",\n                                                                \n                                                                tabsetPanel(\n                                                                  \n                                                                  tabPanel(\"Link Clicks\",\n                                                                           \n                                                                           column(12, plotOutput(\"PlotArticlesDistributionLinkClicks\")),\n                                                                           column(12, plotOutput(\"PlotArticlesLogDistributionLinkClicks\")),\n                                                                           column(12, plotOutput(\"PlotArticlesRepostsDistributionLinkClicks\")),\n                                                                           column(12, plotOutput(\"PlotArticlesRepostsLogDistributionLinkClicks\"))\n                                                                  ),\n                                                                  \n                                                                  tabPanel(\"Engagements\",\n                                                                           \n                                                                           column(12, plotOutput(\"PlotArticlesDistributionEngagements\")),\n                                                                           column(12, plotOutput(\"PlotArticlesLogDistributionEngagements\")),\n                                                                           column(12, plotOutput(\"PlotArticlesRepostsDistributionEngagements\")),\n                                                                           column(12, plotOutput(\"PlotArticlesRepostsLogDistributionEngagements\"))\n                                                                           \n                                                                  ),\n                                                                  \n                                                                  tabPanel(\"Reach\",\n                                                                           \n                                                                           column(12, plotOutput(\"PlotArticlesDistributionReach\")),\n                                                                           column(12, plotOutput(\"PlotArticlesLogDistributionReach\")),\n                                                                           column(12, plotOutput(\"PlotArticlesRepostsDistributionReach\")),\n                                                                           column(12, plotOutput(\"PlotArticlesRepostsLogDistributionReach\"))\n                                                                  )\n                                                                )\n                                                       ),\n                                                       \n                                                       tabPanel(\"Videos\",\n                                                                \n                                                                tabsetPanel(\n                                                                  \n                                                                  tabPanel(\"Video Views\",\n                                                                           \n                                                                           column(12, plotOutput(\"PlotVideosDistributionVideoViews\")),\n                                                                           column(12, plotOutput(\"PlotVideosLogDistributionVideoViews\")),\n                                                                           column(12, plotOutput(\"PlotVideosRepostsDistributionVideoViews\")),\n                                                                           column(12, plotOutput(\"PlotVideosRepostsLogDistributionVideoViews\"))\n                                                                  ),\n                                                                  \n                                                                  tabPanel(\"Engagements\",\n                                                                           \n                                                                           column(12, plotOutput(\"PlotVideosDistributionEngagements\")),\n                                                                           column(12, plotOutput(\"PlotVideosLogDistributionEngagements\")),\n                                                                           column(12, plotOutput(\"PlotVideosRepostsDistributionEngagements\")),\n                                                                           column(12, plotOutput(\"PlotVideosRepostsLogDistributionEngagements\"))\n                                                                  ),\n                                                                  \n                                                                  tabPanel(\"Reach\",\n                                                                           \n                                                                           column(12, plotOutput(\"PlotVideosDistributionReach\")),\n                                                                           column(12, plotOutput(\"PlotVideosLogDistributionReach\")),\n                                                                           column(12, plotOutput(\"PlotVideosRepostsDistributionReach\")),\n                                                                           column(12, plotOutput(\"PlotVideosRepostsLogDistributionReach\"))\n                                                                  )\n                                                                )\n                                                       ),\n                                                       \n                                                       tabPanel(\"Video Memes\",\n                                                                \n                                                                tabsetPanel(\n                                                                  \n                                                                  tabPanel(\"Video Views\",\n                                                                           \n                                                                           column(12, plotOutput(\"PlotVideoMemesDistributionVideoViews\")),\n                                                                           column(12, plotOutput(\"PlotVideoMemesLogDistributionVideoViews\")),\n                                                                           column(12, plotOutput(\"PlotVideoMemesRepostsDistributionVideoViews\")),\n                                                                           column(12, plotOutput(\"PlotVideoMemesRepostsLogDistributionVideoViews\"))\n                                                                           \n                                                                  ),\n                                                                  \n                                                                  tabPanel(\"Engagements\",\n                                                                           \n                                                                           column(12, plotOutput(\"PlotVideoMemesDistributionEngagements\")),\n                                                                           column(12, plotOutput(\"PlotVideoMemesLogDistributionEngagements\")),\n                                                                           column(12, plotOutput(\"PlotVideoMemesRepostsDistributionEngagements\")),\n                                                                           column(12, plotOutput(\"PlotVideoMemesRepostsLogDistributionEngagements\"))\n                                                                           \n                                                                  ),\n                                                                  \n                                                                  tabPanel(\"Reach\",\n                                                                           \n                                                                           column(12, plotOutput(\"PlotVideoMemesDistributionReach\")),\n                                                                           column(12, plotOutput(\"PlotVideoMemesLogDistributionReach\")),\n                                                                           column(12, plotOutput(\"PlotVideoMemesRepostsDistributionReach\")),\n                                                                           column(12, plotOutput(\"PlotVideoMemesRepostsLogDistributionReach\"))\n                                                                           \n                                                                  )\n                                                                )\n                                                       ),\n                                                       tabPanel(\"Memes\",\n                                                                \n                                                                tabsetPanel(\n                                                                  \n                                                                  tabPanel(\"Reach\",\n                                                                           \n                                                                           column(12, plotOutput(\"PlotMemesDistributionReach\")),\n                                                                           column(12, plotOutput(\"PlotMemesLogDistributionReach\")),\n                                                                           column(12, plotOutput(\"PlotMemesRepostsDistributionReach\")),\n                                                                           column(12, plotOutput(\"PlotMemesRepostsLogDistributionReach\"))\n                                                                           \n                                                                  ),\n                                                                  \n                                                                  tabPanel(\"Engagements\",\n                                                                           \n                                                                           column(12, plotOutput(\"PlotMemesDistributionEngagements\")),\n                                                                           column(12, plotOutput(\"PlotMemesLogDistributionEngagements\")),\n                                                                           column(12, plotOutput(\"PlotMemesRepostsDistributionEngagements\")),\n                                                                           column(12, plotOutput(\"PlotMemesRepostsLogDistributionEngagements\"))\n                                                                           \n                                                                  )\n                                                                )\n                                                       ), width = 12)\n                                           ),\n                                           \n                                           box(title = \"Simulation Distributions\", status = \"primary\", solidHeader = TRUE, collapsible = TRUE, width = 12,\n                                               column(12, plotOutput(\"PlotPageSimlatedLogDistributionContentViews\", height = 500)),\n                                               \n                                               tabBox( title = \"\",\n                                                       tabPanel(\"Articles\",\n                                                                \n                                                                column(12, plotOutput(\"PlotArticleSimlatedLogDistributionLinkClicks\", height = 500)),\n                                                                column(12, plotOutput(\"PlotArticleRepostSimlatedLogDistributionLinkClicks\", height = 500)),\n                                                                column(12, plotOutput(\"PlotArticleSimlatedLogDistributionEngagements\", height = 500)),\n                                                                column(12, plotOutput(\"PlotArticleRepostsSimlatedLogDistributionEngagements\", height = 500)),\n                                                                column(12, plotOutput(\"PlotArticleSimlatedLogDistributionReach\", height = 500)),\n                                                                column(12, plotOutput(\"PlotArticleRepostsSimlatedLogDistributionReach\", height = 500))\n                                                       ),\n                                                       \n                                                       tabPanel(\"Videos\",\n                                                                           \n                                                                column(12, plotOutput(\"PlotVideoSimlatedLogDistributionVideoViews\", height = 500)),\n                                                                column(12, plotOutput(\"PlotVideoRepostsSimlatedLogDistributionVideoViews\", height = 500)),\n                                                                column(12, plotOutput(\"PlotVideoSimlatedLogDistributionEngagements\", height = 500)),\n                                                                column(12, plotOutput(\"PlotVideoRepostsSimlatedLogDistributionEngagements\", height = 500)),\n                                                                column(12, plotOutput(\"PlotVideoSimlatedLogDistributionReach\", height = 500)),\n                                                                column(12, plotOutput(\"PlotVideoRepostsSimlatedLogDistributionReach\", height = 500))\n                                                       ),\n                                                                \n                                                       tabPanel(\"Video Memes\",\n                                                                \n                                                                column(12, plotOutput(\"PlotVideosMemeSimlatedLogDistributionVideoViews\", height = 500)),\n                                                                column(12, plotOutput(\"PlotVideosMemeRepostsSimlatedLogDistributionVideoViews\", height = 500)),\n                                                                column(12, plotOutput(\"PlotVideosMemeSimlatedLogDistributionEngagements\", height = 500)),\n                                                                column(12, plotOutput(\"PlotVideosMemeRepostsSimlatedLogDistributionEngagements\", height = 500)),\n                                                                column(12, plotOutput(\"PlotVideosMemeSimlatedLogDistributionReach\", height = 500)),\n                                                                column(12, plotOutput(\"PlotVideosMemeRepostsSimlatedLogDistributionReach\", height = 500))\n                                                                \n                                                       ),\n                                                       \n                                                       tabPanel(\"Memes\",\n                                                                \n                                                                column(12, plotOutput(\"PlotMemeSimlatedLogDistributionReach\", height = 500)),\n                                                                column(12, plotOutput(\"PlotMemeRepostsSimlatedLogDistributionReach\", height = 500)),\n                                                                column(12, plotOutput(\"PlotMemeSimlatedLogDistributionEngagements\", height = 500)),\n                                                                column(12, plotOutput(\"PlotMemeRepostsSimlatedLogDistributionEngagements\", height = 500))\n                                                       ), width = 12)))\n                                  \n                                  , width = 12)))\n                        \n                      \n                        \n                        )))\n)\n\n\n\n\n# SERVER  ===========================================================================================================================\n\nserver <- function(input, output, session){\n  \n  # 3. KPIS --------------------------------------------------------------------------------------------------------------------\n  \n  # 3.1. KPIS - We Are Mitú ---------------------------------------------------------------------------------------------------------------------------\n  \n  output$PlotKpis <- renderHighchart({\n    \n    input$plot_kpis\n    isolate({\n      \n      dates <- data.frame(date = Data$date)\n      dates$date <- as.POSIXct(dates$date)\n      \n      articles_originals <- merge(dates, data.frame(date = DataArticles[which(DataArticles$original == 1),]$date, num = rep(1,nrow(DataArticles[which(DataArticles$original == 1),]))), by = \"date\", all = TRUE)\n      articles_originals <- as.xts(articles_originals[,\"num\"], order.by = articles_originals[,\"date\"])\n      \n      videos_originals <- merge(dates, data.frame(date = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 1),]$date, num = rep(1,nrow(DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 1),]))), by = \"date\", all = TRUE)\n      videos_originals <- as.xts(videos_originals[,\"num\"], order.by = videos_originals[,\"date\"])\n      \n      video_memes_originals <- merge(dates, data.frame(date = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 1),]$date, num = rep(1,nrow(DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 1),]))), by = \"date\", all = TRUE)\n      video_memes_originals <- as.xts(video_memes_originals[,\"num\"], order.by = video_memes_originals[,\"date\"])\n      \n      memes_originals <- merge(dates, data.frame(date = DataPhotos[which(DataPhotos$original == 1),]$date, num = rep(1,nrow(DataPhotos[which(DataPhotos$original == 1),]))), by = \"date\", all = TRUE)\n      memes_originals <- as.xts(memes_originals[,\"num\"], order.by = memes_originals[,\"date\"])\n      \n      \n      articles_reposts <- merge(dates, data.frame(date = DataArticles[which(DataArticles$original == 0),]$date, num = rep(1,nrow(DataArticles[which(DataArticles$original == 0),]))), by = \"date\", all = TRUE)\n      articles_reposts <- as.xts(articles_reposts[,\"num\"], order.by = articles_reposts[,\"date\"])\n      \n      videos_reposts <- merge(dates, data.frame(date = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 0),]$date, num = rep(1,nrow(DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 0),]))), by = \"date\", all = TRUE)\n      videos_reposts <- as.xts(videos_reposts[,\"num\"], order.by = videos_reposts[,\"date\"])\n      \n      video_memes_reposts <- merge(dates, data.frame(date = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 0),]$date, num = rep(1,nrow(DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 0),]))), by = \"date\", all = TRUE)\n      video_memes_reposts <- as.xts(video_memes_reposts[,\"num\"], order.by = video_memes_reposts[,\"date\"])\n      \n      memes_reposts <- merge(dates, data.frame(date = DataPhotos[which(DataPhotos$original == 0),]$date, num = rep(1,nrow(DataPhotos[which(DataPhotos$original == 0),]))), by = \"date\", all = TRUE)\n      memes_reposts <- as.xts(memes_reposts[,\"num\"], order.by = memes_reposts[,\"date\"])\n      \n      colores<- c('#08415C', 'url(#custom-pattern)', '#CC2936', 'url(#custom-pattern-1)', '#EBBAB9', 'url(#custom-pattern-2)','#388697','url(#custom-pattern-3)')\n      # colores<- c('#08415C', '#08415C', '#CC2936', '#CC2936', '#EBBAB9', '#EBBAB9','#388697','#388697')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Content Output\")) %>%\n        hc_add_series(articles_originals, name = \"Article Originals\", type = input$chart_type_kpis) %>%\n        hc_add_series(articles_reposts, name = \"Article Reposts\", type = input$chart_type_kpis) %>%\n        hc_add_series(videos_originals, name = \"Video Originals\", type = input$chart_type_kpis) %>%\n        hc_add_series(videos_reposts, name = \"Video Reposts\", type = input$chart_type_kpis) %>%\n        hc_add_series(video_memes_originals, name = \"Video Meme Originals\", type = input$chart_type_kpis) %>%\n        hc_add_series(video_memes_reposts, name = \"Video Meme Reposts\", type = input$chart_type_kpis) %>%\n        hc_add_series(memes_originals, name = \"Meme Originals\", type = input$chart_type_kpis) %>%\n        hc_add_series(memes_reposts, name = \"Meme Reposts\", type = input$chart_type_kpis) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_kpis == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_kpis == \"area\" || input$chart_type_kpis == \"column\"){if(input$chart_stack_kpis != \"none\"){input$chart_stack_kpis}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_kpis, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())%>%\n        hc_defs(patterns = list(list(id = \"custom-pattern\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#08415C', strokeWidth = 2)), list(id = \"custom-pattern-1\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#CC2936', strokeWidth = 2)), list(id = \"custom-pattern-2\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#EBBAB9', strokeWidth = 2)), list(id = \"custom-pattern-3\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#388697', strokeWidth = 2))))\n      hc\n    })\n  })\n  \n  output$PlotKpis1 <- renderHighchart({\n    \n    input$plot_kpis1\n    isolate({\n      \n      dates <- data.frame(created_time = Data$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      articles_originals <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$original == 1),]$created_time, num = DataArticles[which(DataArticles$original == 1),]$link_clicks), by = \"created_time\", all = TRUE)\n      articles_originals <- as.xts(articles_originals[,\"num\"], order.by = articles_originals[,\"created_time\"])\n      \n      videos_originals <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 1),]$created_time, num = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 1),]$post_video_views), by = \"created_time\", all = TRUE)\n      videos_originals <- as.xts(videos_originals[,\"num\"], order.by = videos_originals[,\"created_time\"])\n      \n      video_memes_originals <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 1),]$created_time, num = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 1),]$post_video_views), by = \"created_time\", all = TRUE)\n      video_memes_originals <- as.xts(video_memes_originals[,\"num\"], order.by = video_memes_originals[,\"created_time\"])\n      \n      memes_originals <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$original == 1),]$created_time, num = DataPhotos[which(DataPhotos$original == 1),]$post_reach), by = \"created_time\", all = TRUE)\n      memes_originals <- as.xts(memes_originals[,\"num\"], order.by = memes_originals[,\"created_time\"])\n      \n      \n      articles_reposts <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$original == 0),]$created_time, num = DataArticles[which(DataArticles$original == 0),]$link_clicks), by = \"created_time\", all = TRUE)\n      articles_reposts <- as.xts(articles_reposts[,\"num\"], order.by = articles_reposts[,\"created_time\"])\n      \n      videos_reposts <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 0),]$created_time, num = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 0),]$post_video_views), by = \"created_time\", all = TRUE)\n      videos_reposts <- as.xts(videos_reposts[,\"num\"], order.by = videos_reposts[,\"created_time\"])\n      \n      video_memes_reposts <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 0),]$created_time, num = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 0),]$post_video_views), by = \"created_time\", all = TRUE)\n      video_memes_reposts <- as.xts(video_memes_reposts[,\"num\"], order.by = video_memes_reposts[,\"created_time\"])\n      \n      memes_reposts <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$original == 0),]$created_time, num = DataPhotos[which(DataPhotos$original == 0),]$post_reach), by = \"created_time\", all = TRUE)\n      memes_reposts <- as.xts(memes_reposts[,\"num\"], order.by = memes_reposts[,\"created_time\"])\n      \n      \n      colores<- c('#08415C', 'url(#custom-pattern)', '#CC2936', 'url(#custom-pattern-1)', '#EBBAB9', 'url(#custom-pattern-2)','#388697','url(#custom-pattern-3)')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Content Views\")) %>%\n        hc_add_series(articles_originals, name = \"Article Originals\", type = input$chart_type_kpis1) %>%\n        hc_add_series(articles_reposts, name = \"Article Reposts\", type = input$chart_type_kpis1) %>%\n        hc_add_series(videos_originals, name = \"Video Originals\", type = input$chart_type_kpis1) %>%\n        hc_add_series(videos_reposts, name = \"Video Reposts\", type = input$chart_type_kpis1) %>%\n        hc_add_series(video_memes_originals, name = \"Video Meme Originals\", type = input$chart_type_kpis1) %>%\n        hc_add_series(video_memes_reposts, name = \"Video Meme Reposts\", type = input$chart_type_kpis1) %>%\n        hc_add_series(memes_originals, name = \"Meme Originals\", type = input$chart_type_kpis1) %>%\n        hc_add_series(memes_reposts, name = \"Meme Reposts\", type = input$chart_type_kpis1) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_kpis1 == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_kpis1 == \"area\" || input$chart_type_kpis1 == \"column\"){if(input$chart_stack_kpis1 != \"none\"){input$chart_stack_kpis1}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_kpis1, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())%>%\n        hc_defs(patterns = list(list(id = \"custom-pattern\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#08415C', strokeWidth = 2)), list(id = \"custom-pattern-1\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#CC2936', strokeWidth = 2)), list(id = \"custom-pattern-2\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#EBBAB9', strokeWidth = 2)), list(id = \"custom-pattern-3\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#388697', strokeWidth = 2))))\n      \n      hc\n    })\n  })\n  \n  output$PlotKpis2 <- renderHighchart({\n    \n    input$plot_kpis2\n    isolate({\n      \n      dates <- data.frame(created_time = Data$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      articles_originals <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$original == 1),]$created_time, num = DataArticles[which(DataArticles$original == 1),]$total_interactions), by = \"created_time\", all = TRUE)\n      articles_originals <- as.xts(articles_originals[,\"num\"], order.by = articles_originals[,\"created_time\"])\n      \n      videos_originals <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 1),]$created_time, num = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 1),]$total_interactions), by = \"created_time\", all = TRUE)\n      videos_originals <- as.xts(videos_originals[,\"num\"], order.by = videos_originals[,\"created_time\"])\n      \n      video_memes_originals <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 1),]$created_time, num = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 1),]$total_interactions), by = \"created_time\", all = TRUE)\n      video_memes_originals <- as.xts(video_memes_originals[,\"num\"], order.by = video_memes_originals[,\"created_time\"])\n      \n      memes_originals <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$original == 1),]$created_time, num = DataPhotos[which(DataPhotos$original == 1),]$total_interactions), by = \"created_time\", all = TRUE)\n      memes_originals <- as.xts(memes_originals[,\"num\"], order.by = memes_originals[,\"created_time\"])\n      \n      \n      articles_reposts <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$original == 0),]$created_time, num = DataArticles[which(DataArticles$original == 0),]$total_interactions), by = \"created_time\", all = TRUE)\n      articles_reposts <- as.xts(articles_reposts[,\"num\"], order.by = articles_reposts[,\"created_time\"])\n      \n      videos_reposts <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 0),]$created_time, num = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 0),]$total_interactions), by = \"created_time\", all = TRUE)\n      videos_reposts <- as.xts(videos_reposts[,\"num\"], order.by = videos_reposts[,\"created_time\"])\n      \n      video_memes_reposts <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 0),]$created_time, num = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 0),]$total_interactions), by = \"created_time\", all = TRUE)\n      video_memes_reposts <- as.xts(video_memes_reposts[,\"num\"], order.by = video_memes_reposts[,\"created_time\"])\n      \n      memes_reposts <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$original == 0),]$created_time, num = DataPhotos[which(DataPhotos$original == 0),]$total_interactions), by = \"created_time\", all = TRUE)\n      memes_reposts <- as.xts(memes_reposts[,\"num\"], order.by = memes_reposts[,\"created_time\"])\n      \n      colores<- c('#08415C', 'url(#custom-pattern)', '#CC2936', 'url(#custom-pattern-1)', '#EBBAB9', 'url(#custom-pattern-2)','#388697','url(#custom-pattern-3)')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Interactions\")) %>%\n        hc_add_series(articles_originals, name = \"Article Originals\", type = input$chart_type_kpis2) %>%\n        hc_add_series(articles_reposts, name = \"Article Reposts\", type = input$chart_type_kpis2) %>%\n        hc_add_series(videos_originals, name = \"Video Originals\", type = input$chart_type_kpis2) %>%\n        hc_add_series(videos_reposts, name = \"Video Reposts\", type = input$chart_type_kpis2) %>%\n        hc_add_series(video_memes_originals, name = \"Video Meme Originals\", type = input$chart_type_kpis2) %>%\n        hc_add_series(video_memes_reposts, name = \"Video Meme Reposts\", type = input$chart_type_kpis2) %>%\n        hc_add_series(memes_originals, name = \"Meme Originals\", type = input$chart_type_kpis2) %>%\n        hc_add_series(memes_reposts, name = \"Meme Reposts\", type = input$chart_type_kpis2) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_kpis2 == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_kpis2 == \"area\" || input$chart_type_kpis2 == \"column\"){if(input$chart_stack_kpis2 != \"none\"){input$chart_stack_kpis2}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_kpis2, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())%>%\n        hc_defs(patterns = list(list(id = \"custom-pattern\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#08415C', strokeWidth = 2)), list(id = \"custom-pattern-1\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#CC2936', strokeWidth = 2)), list(id = \"custom-pattern-2\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#EBBAB9', strokeWidth = 2)), list(id = \"custom-pattern-3\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#388697', strokeWidth = 2))))%>%\n        hc_defs(patterns = list(list(id = \"custom-pattern\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#08415C', strokeWidth = 2)), list(id = \"custom-pattern-1\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#CC2936', strokeWidth = 2)), list(id = \"custom-pattern-2\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#EBBAB9', strokeWidth = 2)), list(id = \"custom-pattern-3\", path = list(d = 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', stroke = '#388697', strokeWidth = 2))))\n      hc\n    })\n  })\n  \n  output$PlotKpis3 <- renderHighchart({\n    \n    input$plot_kpis3\n    isolate({\n      \n      dates <- data.frame(created_time = Data$created_time)\n      dates$created_time <- as.POSIXct(dates$created_time)\n      \n      articles_originals <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$original == 1),]$created_time, num = DataArticles[which(DataArticles$original == 1),]$post_reach), by = \"created_time\", all = TRUE)\n      articles_originals <- as.xts(articles_originals[,\"num\"], order.by = articles_originals[,\"created_time\"])\n      \n      videos_originals <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 1),]$created_time, num = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 1),]$post_reach), by = \"created_time\", all = TRUE)\n      videos_originals <- as.xts(videos_originals[,\"num\"], order.by = videos_originals[,\"created_time\"])\n      \n      video_memes_originals <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 1),]$created_time, num = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 1),]$post_reach), by = \"created_time\", all = TRUE)\n      video_memes_originals <- as.xts(video_memes_originals[,\"num\"], order.by = video_memes_originals[,\"created_time\"])\n      \n      memes_originals <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$original == 1),]$created_time, num = DataPhotos[which(DataPhotos$original == 1),]$post_reach), by = \"created_time\", all = TRUE)\n      memes_originals <- as.xts(memes_originals[,\"num\"], order.by = memes_originals[,\"created_time\"])\n      \n      \n      articles_reposts <- merge(dates, data.frame(created_time = DataArticles[which(DataArticles$original == 0),]$created_time, num = DataArticles[which(DataArticles$original == 0),]$post_reach), by = \"created_time\", all = TRUE)\n      articles_reposts <- as.xts(articles_reposts[,\"num\"], order.by = articles_reposts[,\"created_time\"])\n      \n      videos_reposts <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 0),]$created_time, num = DataVideos[which(DataVideos$video_meme == 0 & DataVideos$original == 0),]$post_reach), by = \"created_time\", all = TRUE)\n      videos_reposts <- as.xts(videos_reposts[,\"num\"], order.by = videos_reposts[,\"created_time\"])\n      \n      video_memes_reposts <- merge(dates, data.frame(created_time = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 0),]$created_time, num = DataVideos[which(DataVideos$video_meme == 1 & DataVideos$original == 0),]$post_reach), by = \"created_time\", all = TRUE)\n      video_memes_reposts <- as.xts(video_memes_reposts[,\"num\"], order.by = video_memes_reposts[,\"created_time\"])\n      \n      memes_reposts <- merge(dates, data.frame(created_time = DataPhotos[which(DataPhotos$original == 0),]$created_time, num = DataPhotos[which(DataPhotos$original == 0),]$post_reach), by = \"created_time\", all = TRUE)\n      memes_reposts <- as.xts(memes_reposts[,\"num\"], order.by = memes_reposts[,\"created_time\"])\n      \n      colores<- c('#08415C', 'url(#custom-pattern)', '#CC2936', 'url(#custom-pattern-1)', '#EBBAB9', 'url(#custom-pattern-2)','#388697','url(#custom-pattern-3)')\n      \n      hc <-highchart(type = \"stock\") %>%\n        hc_colors(colores) %>%\n        hc_yAxis(offset = 30, title = list(text = \"Reach\")) %>%\n        hc_add_series(articles_originals, name = \"Article Originals\", type = input$chart_type_kpis3) %>%\n        hc_add_series(articles_reposts, name = \"Article Reposts\", type = input$chart_type_kpis3) %>%\n        hc_add_series(videos_originals, name = \"Video Originals\", type = input$chart_type_kpis3) %>%\n        hc_add_series(videos_reposts, name = \"Video Reposts\", type = input$chart_type_kpis3) %>%\n        hc_add_series(video_memes_originals, name = \"Video Meme Originals\", type = input$chart_type_kpis3) %>%\n        hc_add_series(video_memes_reposts, name = \"Video Meme Reposts\", type = input$chart_type_kpis3) %>%\n        hc_add_series(memes_originals, name = \"Meme Originals\", type = input$chart_type_kpis3) %>%\n        hc_add_series(memes_reposts, name = \"Meme Reposts\", type = input$chart_type_kpis3) %>%\n        hc_scrollbar(enabled = FALSE) %>%\n        hc_rangeSelector(selected = ifelse(input$chart_time_kpis3 == \"day\", 0, 4)) %>%\n        hc_legend(enabled = TRUE) %>%\n        hc_plotOptions(series = list(animation = FALSE, borderColor = \"black\", stacking = if(input$chart_type_kpis3 == \"area\" || input$chart_type_kpis3 == \"column\"){if(input$chart_stack_kpis3 != \"none\"){input$chart_stack_kpis3}}, dataGrouping = list(approximation = \"sum\", enabled = TRUE, forced = TRUE, units = list(list(input$chart_time_kpis3, list(1)))))) %>%\n        hc_tooltip(pointFormat = '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>')%>%\n        # hc_tooltip(pointFormat = \"'{series.name}: {point.y} <br>' + 'Total: {point.total}'\")%>%\n        hc_add_theme(hc_theme_smpl())\n      hc\n    })\n  })\n  \n  Plot_Month <- function (ds_goal, ds, ds_total, plot_title){\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = paste(plot_title, \" - Monthly\"), align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = paste(plot_title, \" Goal\"), pointPadding = 0) %>%\n      hc_add_series(data = ds, name = plot_title, pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = paste(\"Total \", plot_title), type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  }\n  \n  Plot_Day <- function (ds_goal, ds, ds_total, ds_forecast, plot_title){\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_title(text =  paste(plot_title, \" - Daily\"), align = \"center\") %>%\n      hc_yAxis(title = list(text = \"Content Output - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Output\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_total, name = paste(\"Total \", plot_title), type = \"spline\") %>%\n      # hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = paste(plot_title, \"Forecast\"), type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds, name = paste(\"Daily \", plot_title), type = \"waterfall\") %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  }\n  \n  output$PlotKpisContentOutputMonth <- renderHighchart({\n    \n    plot_title <- \"Content Output\"\n    \n    year_selected <- as.Date(paste(input$kpis_year_content_output, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(Data[which(Data$date >= year_selected & Data$date < year_selected + years(1)),], .(date = format(Data[which(Data$date >= year_selected & Data$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_content_output <- cumsum(as.numeric(DataMonth$content_output))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$content_output))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_content_output)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$video_original_output + DataGoal[x,]$video_repost_output + DataGoal[x,]$video_meme_output + DataGoal[x,]$article_original_output + DataGoal[x,]$article_repost_output + DataGoal[x,]$meme_original_output + DataGoal[x,]$meme_repost_output)\n    })\n   \n    Plot_Month(ds_goal, ds, ds_total, plot_title)\n    \n  })\n  \n  output$PlotKpisContentOutputTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(Data[which(Data$date >= \"2017-01-01\"),], .(date = format(Data[which(Data$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, page_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoals$content_output <- DataGoals$video_original_output + DataGoals$video_repost_output + DataGoals$video_meme_output + DataGoals$article_original_output + DataGoals$article_repost_output + DataGoals$meme_original_output + DataGoals$meme_repost_output\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"content_output\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$content_output-DataMonth$page_content_output)/DataMonth$content_output\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$page_content_output)),]\n    \n    # DataMonth$content_output <- format( DataMonth$content_output, big.mark = \",\")\n    # DataMonth$page_content_output <- format( DataMonth$page_content_output, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n\n  output$PlotKpisContentOutput <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$kpis_month_content_output, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == month_selected & format.Date(Data$date, \"%Y\") == year_selected),], \"date\", summarize, content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_content_output <- cumsum(DataMonth$content_output)\n    \n    slope <- lm(cumsum(content_output) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$content_output)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_content_output)\n    })\n    \n    DataGoals$total_content_output <- rowSums(cbind(DataGoals$video_original_output, DataGoals$video_repost_output, DataGoals$video_meme_output, DataGoals$article_original_output, DataGoals$article_repost_output, DataGoals$meme_original_output, DataGoals$meme_repost_output), na.rm = TRUE)\n    \n    goal <- as.numeric(ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$total_content_output, 0))\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    # hc <-highchart() %>%\n    #   hc_chart(type = \"waterfall\") %>%\n    #   hc_title(text = \"Content Output - Daily\", align = \"center\") %>%\n    #   hc_yAxis(title = list(text = \"Content Output - Daily\")) %>%\n    #   hc_xAxis(type = \"category\") %>%\n    #   hc_yAxis(title = list(text = \"Content Output\")) %>%\n    #   hc_legend(enabled = TRUE) %>%\n    #   hc_add_series(data = ds_total, name = \"Total Content Output\", type = \"spline\") %>%\n    #   # hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n    #   hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n    #   hc_add_series(data = ds, name = \"Daily Content Output\", type = \"waterfall\") %>%\n    #   hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n    #   hc_tooltip(shared = TRUE)%>% \n    #   hc_add_theme(hc_theme_smpl())\n    # hc\n    \n    plot_title <- \"Content Output\"\n    \n    Plot_Day(ds_goal, ds, ds_total, ds_forecast, plot_title)\n    \n  })\n  \n  \n  output$PlotKpisArticleContentOutputMonth <- renderHighchart({\n    \n    plot_title <- \"Article Output\"\n    \n    year_selected <- as.Date(paste(input$kpis_year_article_output, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataArticles[which(DataArticles$date >= year_selected & DataArticles$date < year_selected + years(1)),], .(date = format(DataArticles[which(DataArticles$date >= year_selected & DataArticles$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, article_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_article_content_output <- cumsum(as.numeric(DataMonth$article_content_output))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$article_content_output))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_article_content_output)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$article_original_output + DataGoal[x,]$article_repost_output)\n    })\n \n    Plot_Month(ds_goal, ds, ds_total, plot_title)\n    \n  })\n  \n  output$PlotKpisArticleContentOutputTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataArticles[which(DataArticles$date >= \"2017-01-01\"),], .(date = format(DataArticles[which(DataArticles$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, article_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoals$content_output <- DataGoals$article_original_output + DataGoals$article_repost_output\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"content_output\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$content_output-DataMonth$article_content_output)/DataMonth$content_output\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$article_content_output)),]\n    \n    # DataMonth$content_output <- format( DataMonth$content_output, big.mark = \",\")\n    # DataMonth$article_content_output <- format( DataMonth$article_content_output, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n\n  output$PlotKpisArticleContentOutput <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$kpis_month_article_content_output, \"01\"), \"%b %Y %d\")\n    \n    # date_selected <- as.Date(paste(\"abr. 2017\", \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == month_selected & format.Date(Data$date, \"%Y\") == year_selected & Data$post_type == \"link\"),], \"date\", summarize, article_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_article_content_output <- cumsum(DataMonth$article_content_output)\n    \n    slope <- lm(cumsum(article_content_output) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$article_content_output)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_article_content_output)\n    })\n    \n    DataGoals$total_article_content_output <- DataGoals$article_original_output + DataGoals$article_repost_output\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$total_article_content_output, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_title(text = \"Article Output - Daily\", align = \"center\") %>%\n      hc_yAxis(title = list(text = \"Article Output - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Article Output\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Article Output\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  output$PlotKpisVideoContentOutputMonth <- renderHighchart({\n    \n    plot_title <- \"Video Output\"\n    \n    year_selected <- as.Date(paste(input$kpis_year_video_output, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$date >= year_selected & DataVideos$date < year_selected + years(1)),], .(date = format(DataVideos[which(DataVideos$date >= year_selected & DataVideos$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, video_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_video_content_output <- cumsum(as.numeric(DataMonth$video_content_output))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$video_content_output))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_video_content_output)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$video_original_output + DataGoal[x,]$video_repost_output)\n    })\n    \n    Plot_Month(ds_goal, ds, ds_total, plot_title)\n    \n  })\n  \n  output$PlotKpisVideoContentOutputTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$date >= \"2017-01-01\"),], .(date = format(DataVideos[which(DataVideos$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, video_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoals$content_output <- DataGoals$video_original_output + DataGoals$video_repost_output\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"content_output\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$content_output-DataMonth$video_content_output)/DataMonth$content_output\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$video_content_output)),]\n    \n    # DataMonth$content_output <- format( DataMonth$content_output, big.mark = \",\")\n    # DataMonth$video_content_output <- format( DataMonth$video_content_output, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisVideoContentOutputTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Video Output - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisVideoContentOutput <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$kpis_month_video_content_output, \"01\"), \"%b %Y %d\")\n    \n    # date_selected <- as.Date(paste(\"abr. 2017\", \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == month_selected & format.Date(Data$date, \"%Y\") == year_selected & Data$post_type == \"video\"),], \"date\", summarize, video_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_video_content_output <- cumsum(DataMonth$video_content_output)\n    \n    slope <- lm(cumsum(video_content_output) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$video_content_output)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_video_content_output)\n    })\n    \n    DataGoals$total_video_content_output <- DataGoals$video_original_output + DataGoals$video_repost_output\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$total_video_content_output, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_yAxis(title = list(text = \"Video Output - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Video Output\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Video Output\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  output$PlotKpisMemeContentOutputMonth <- renderHighchart({\n    \n    plot_title <- \"Meme Output\"\n    \n    year_selected <- as.Date(paste(input$kpis_year_meme_output, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataPhotos[which(DataPhotos$date >= year_selected & DataPhotos$date < year_selected + years(1)),], .(date = format(DataPhotos[which(DataPhotos$date >= year_selected & DataPhotos$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, meme_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_meme_content_output <- cumsum(as.numeric(DataMonth$meme_content_output))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$meme_content_output))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_meme_content_output)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$meme_original_output + DataGoal[x,]$meme_repost_output)\n    })\n    \n    Plot_Month(ds_goal, ds, ds_total, plot_title)\n    \n  })\n  \n  output$PlotKpisMemeContentOutputTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataPhotos[which(DataPhotos$date >= \"2017-01-01\"),], .(date = format(DataPhotos[which(DataPhotos$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, meme_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoals$content_output <- DataGoals$meme_original_output + DataGoals$meme_repost_output\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"content_output\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$content_output-DataMonth$meme_content_output)/DataMonth$content_output\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$meme_content_output)),]\n    \n    # DataMonth$content_output <- format( DataMonth$content_output, big.mark = \",\")\n    # DataMonth$meme_content_output <- format( DataMonth$meme_content_output, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisMemeContentOutputTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Meme Output - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisMemeContentOutput <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$kpis_month_meme_content_output, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == month_selected & format.Date(Data$date, \"%Y\") == year_selected & Data$post_type == \"photo\"),], \"date\", summarize, meme_content_output = length(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_meme_content_output <- cumsum(DataMonth$meme_content_output)\n    \n    slope <- lm(cumsum(meme_content_output) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$meme_content_output)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_meme_content_output)\n    })\n    \n    DataGoals$total_meme_content_output <- DataGoals$meme_original_output + DataGoals$meme_repost_output\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$total_meme_content_output, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_yAxis(title = list(text = \"Meme Output - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Number of Posts\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Meme Output\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Meme Output\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  \n  \n  output$PlotKpisTotalFollowers <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_total_followers, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- WamPageData\n    DataMonth$page_followers <- DataMonth$page_fans\n    DataMonth <- DataMonth[which(DataMonth$date >= year_selected & DataMonth$date < year_selected + years(1)),]\n    \n    DataMonth <- ddply(DataMonth, .(date = format(DataMonth$date, \"%Y-%m\")), summarize, page_followers = max(page_followers))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$page_followers))\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$total_followers)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Total Followers\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Totla Followers\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Total Followers Goal\", pointPadding = 0) %>%\n      # hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Total Followers\", pointPadding = 0.2) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisTotalFollowersTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- WamPageData\n    DataMonth$page_followers <- DataMonth$page_fans\n    DataMonth <- DataMonth[which(DataMonth$date >= year_selected & DataMonth$date < year_selected + years(1)),]\n    \n    DataMonth <- ddply(DataMonth, .(date = format(DataMonth$date, \"%Y-%m\")), summarize, page_followers = max(page_followers))\n    \n    # DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"total_followers\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$total_followers-DataMonth$page_followers)/DataMonth$total_followers\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$page_followers)),]\n    \n    DataMonth$total_followers <- format( DataMonth$total_followers, big.mark = \",\")\n    DataMonth$page_followers <- format( DataMonth$page_followers, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  \n  \n  output$PlotKpisNewFollowersMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_new_followers, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(WamPageData[which(WamPageData$date >= year_selected & WamPageData$date < year_selected + years(1)),], .(date = format(WamPageData[which(WamPageData$date >= year_selected & WamPageData$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, new_followers = sum(page_fan_adds) - sum(page_fan_removes))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_new_followers <- cumsum(as.numeric(DataMonth$new_followers))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$new_followers))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_new_followers)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$new_followers)\n    })\n    \n    # DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == format.Date(max(Data$date), \"%m\") & format.Date(Data$date, \"%Y\") == format.Date(max(Data$date), \"%Y\")),], \"date\", summarize, total_followers = mean(page_total_likes), new_followers = mean(page_new_likes))\n    \n    # DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(new_followers) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    # \n    # DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    # \n    # ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n    #   list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    # })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"New Followers - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"New Followers\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"New Followers Goal\", pointPadding = 0) %>%\n      # hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"New Followers\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total New Followers\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisNewFollowersTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(WamPageData[which(WamPageData$date >= \"2017-01-01\"),], .(date = format(WamPageData[which(WamPageData$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, page_new_followers = sum(page_fan_adds) - sum(page_fan_removes))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"new_followers\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$new_followers-DataMonth$page_new_followers)/DataMonth$new_followers\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$page_new_followers)),]\n    \n    DataMonth$new_followers <- format( DataMonth$new_followers, big.mark = \",\")\n    DataMonth$page_new_followers <- format( DataMonth$page_new_followers, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisNewFollowers <- renderHighchart({\n    \n    chart_type <- input$kpis_chart_type_new_followers\n    \n    date_selected <- as.Date(paste(input$kpis_month_new_followers, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    # DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == month_selected & format.Date(Data$date, \"%Y\") == year_selected),], \"date\", summarize, total_followers = mean(page_total_likes), new_followers = mean(page_new_likes))\n    \n    DataMonth <- ddply(WamPageData[which(format.Date(WamPageData$date, \"%m\") == month_selected & format.Date(WamPageData$date, \"%Y\") == year_selected),], \"date\", summarize, new_followers = sum(page_fan_adds) - sum(page_fan_removes))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_new_followers <- cumsum(DataMonth$new_followers)\n    \n    slope <- lm(cumsum(new_followers) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$new_followers)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_new_followers)\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$new_followers, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_title(text = \"New Followers - Daily\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"New Followers\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily New Followers\", type = chart_type) %>%\n      hc_add_series(data = ds_total, name = \"Total New Followers\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  \n  \n  \n  output$PlotKpisReachMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_reach, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(WamPageData[which(WamPageData$date >= year_selected & WamPageData$date < year_selected + years(1)),], .(date = format(WamPageData[which(WamPageData$date >= year_selected & WamPageData$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, reach = sum(page_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_reach <- cumsum(as.numeric(DataMonth$reach))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$reach))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_reach)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$reach)\n    })\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == format.Date(max(Data$date), \"%m\") & format.Date(Data$date, \"%Y\") == format.Date(max(Data$date), \"%Y\")),], \"date\", summarize, reach = sum(post_reach))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Reach - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Reach\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Reach Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Reach\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Reach\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisReachTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Reach - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisReach <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$kpis_month_reach, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    # DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == month_selected & format.Date(Data$date, \"%Y\") == year_selected),], \"date\", summarize, reach = sum(post_reach))\n    # \n    DataMonth <- ddply(WamPageData[which(format.Date(WamPageData$date, \"%m\") == month_selected & format.Date(WamPageData$date, \"%Y\") == year_selected),], \"date\", summarize, reach = sum(page_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_reach <- cumsum(DataMonth$reach)\n    \n    slope <- lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$reach)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_reach)\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$reach, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_yAxis(title = list(text = \"Reach - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Reach\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Reach\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Reach\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  \n  output$PlotKpisEngagementMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_engagement, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(Data[which(Data$date >= year_selected & Data$date < year_selected + years(1)),], .(date = format(Data[which(Data$date >= year_selected & Data$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, interactions = sum(total_interactions))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_interactions <- cumsum(as.numeric(DataMonth$interactions))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$interactions))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_interactions)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$engagement)\n    })\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == format.Date(max(Data$date), \"%m\") & format.Date(Data$date, \"%Y\") == format.Date(max(Data$date), \"%Y\")),], \"date\", summarize, interactions = sum(total_interactions))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Engagement - Monthly\", align = \"center\") %>%\n      hc_yAxis(title = list(text = \"Engagement - Monthly\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Engagement\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Engagement Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Engagement\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Engagement\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisEngagementTitle <- renderHighchart({\n    \n    hc <- highchart() %>% \n      hc_chart(type = \"bar\", height = 50) %>%\n      hc_title(text = \"Engagement - Daily\", align = \"center\") %>%\n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisEngagement<- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$kpis_month_engagement, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == month_selected & format.Date(Data$date, \"%Y\") == year_selected),], \"date\", summarize, interactions = sum(total_interactions))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    \n    slope <- lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$interactions)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_interactions)\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$engagement, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_yAxis(title = list(text = \"Engagement - Daily\")) %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Engagement\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Engagement\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Engagement\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  \n  output$PlotKpisContentViewsMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_content_views, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(Data[which(Data$date >= year_selected & Data$date < year_selected + years(1)),], .(date = format(Data[which(Data$date >= year_selected & Data$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, content_views = sum(post_reach[post_type == \"photo\"]) + sum(link_clicks[post_type == \"link\"]))\n    \n    DataMonthVideo <- ddply(WamPageData[which(WamPageData$date >= year_selected & WamPageData$date < year_selected + years(1) & WamPageData$date %in% Data$date),], .(date = format(WamPageData[which(WamPageData$date >= year_selected & WamPageData$date < year_selected + years(1) & WamPageData$date %in% Data$date),]$date, \"%Y-%m\")), summarize, content_views_video = sum(page_video_views))\n    \n    DataMonth$content_views <- DataMonth$content_views + DataMonthVideo$content_views_video\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_content_views <- cumsum(as.numeric(DataMonth$content_views))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$content_views)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_content_views)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$content_views)\n    })\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == format.Date(max(Data$date), \"%m\") & format.Date(Data$date, \"%Y\") == format.Date(max(Data$date), \"%Y\")),], \"date\", summarize, photo_views = sum(post_reach[post_type == \"photo\"]), article_views = sum(link_clicks[post_type == \"link\"]), video_views = sum(post_video_views[post_type == \"video\"]), content_views = photo_views + article_views + video_views)\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(content_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Content Views - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Views\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Content Views Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Content Views\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Content Views\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisContentViewsTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(Data[which(Data$date >= \"2017-01-01\"),], .(date = format(Data[which(Data$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, page_content_views = sum(post_reach[post_type == \"photo\"]) + sum(link_clicks[post_type == \"link\"]))\n    \n    DataMonthVideo <- ddply(WamPageData[which(WamPageData$date >= \"2017-01-01\" & WamPageData$date %in% Data$date),], .(date = format(WamPageData[which(WamPageData$date >= \"2017-01-01\" & WamPageData$date %in% Data$date),]$date, \"%Y-%m\")), summarize, content_views_video = sum(page_video_views))\n    \n    DataMonth$page_content_views <- DataMonth$page_content_views + DataMonthVideo$content_views_video\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"content_views\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$content_views-DataMonth$page_content_views)/DataMonth$content_views\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$page_content_views)),]\n    \n    DataMonth$content_views <- format( DataMonth$content_views, big.mark = \",\")\n    DataMonth$page_content_views <- format( DataMonth$page_content_views, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisContentViews <- renderHighchart({\n    \n    date_selected <- as.Date(paste(input$kpis_month_content_views, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(Data[which(format.Date(Data$date, \"%m\") == month_selected & format.Date(Data$date, \"%Y\") == year_selected),], \"date\", summarize, photo_views = sum(post_reach[post_type == \"photo\"]), article_views = sum(link_clicks[post_type == \"link\"]), content_views = photo_views + article_views)\n    \n    DataMonthVideo <- ddply(WamPageData[which(format.Date(WamPageData$date, \"%m\") == month_selected & format.Date(WamPageData$date, \"%Y\") == year_selected),], \"date\", summarize, video_views = sum(page_video_views))\n    \n    DataMonth$content_views <- DataMonth$content_views + DataMonthVideo[which(DataMonthVideo$date %in% DataMonth$date),]$video_views\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_content_views <- cumsum(DataMonth$content_views)\n    \n    slope <- lm(cumsum(content_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$content_views)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_content_views)\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$content_views, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_title(text = \"Content Views - Daily\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Views\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = \"Daily Content Views\", type = \"column\") %>%\n      hc_add_series(data = ds_total, name = \"Total Content Views\", type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    \n    hc\n    \n  })\n  \n  \n  \n  output$PlotKpisArticlesMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_articles, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataArticles[which(DataArticles$date >= year_selected & DataArticles$date < year_selected + years(1)),], .(date = format(DataArticles[which(DataArticles$date >= year_selected & DataArticles$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, link_clicks = sum(link_clicks))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_link_clicks <- cumsum(as.numeric(DataMonth$link_clicks))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$link_clicks))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_link_clicks)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$article_content_views)\n    })\n    \n    DataMonth <- ddply(DataArticles[which(format.Date(DataArticles$date, \"%m\") == format.Date(max(DataArticles$date), \"%m\") & format.Date(DataArticles$date, \"%Y\") == format.Date(max(DataArticles$date), \"%Y\")),], \"date\", summarize, link_clicks = sum(link_clicks))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(link_clicks) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Articles CV - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Views\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Articles CV Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Articles CV\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Articles CV\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisArticlesTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataArticles[which(DataArticles$date >= \"2017-01-01\"),], .(date = format(DataArticles[which(DataArticles$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, link_clicks = sum(link_clicks))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"article_content_views\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$article_content_views-DataMonth$link_clicks)/DataMonth$article_content_views\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$link_clicks)),]\n    \n    DataMonth$article_content_views <- format( DataMonth$article_content_views, big.mark = \",\")\n    DataMonth$link_clicks <- format( DataMonth$link_clicks, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisArticles <- renderHighchart({\n    \n    if(input$articles_kpi_select_repost == \"Originals\"){\n      \n      DataArticles <- DataArticles[which(DataArticles$original == 1),]\n      \n    }\n    \n    else if (input$articles_kpi_select_repost == \"Reposts\"){\n      \n      DataArticles <- DataArticles[which(DataArticles$original == 0),]\n    }\n    \n    date_selected <- as.Date(paste(input$kpis_month_articles, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataArticles[which(format.Date(DataArticles$date, \"%m\") == month_selected & format.Date(DataArticles$date, \"%Y\") == year_selected),], \"date\", summarize, link_clicks = sum(link_clicks), interactions = sum(total_interactions), reach = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_link_clicks <- cumsum(DataMonth$link_clicks)\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    DataMonth$total_reach <- cumsum(DataMonth$reach)\n    \n    slope <- ifelse(input$articles_kpi_select_variable == \"Content Views\",lm(cumsum(link_clicks) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], ifelse(input$articles_kpi_select_variable == \"Interactions\", lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$articles_kpi_select_variable == \"Content Views\", DataMonth[x,]$link_clicks, ifelse(input$articles_kpi_select_variable == \"Interactions\", DataMonth[x,]$interactions, DataMonth[x,]$reach)))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$articles_kpi_select_variable == \"Content Views\", DataMonth[x,]$total_link_clicks, ifelse(input$articles_kpi_select_variable == \"Interactions\", DataMonth[x,]$total_interactions, DataMonth[x,]$total_reach)))\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$article_content_views, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_title(text = \"Articles CV - Daily\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = input$articles_kpi_select_variable)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = paste(\"Daily\", input$articles_kpi_select_variable, sep = \" \"), type = \"column\") %>%\n      hc_add_series(data = ds_total, name = paste(\"Total\", input$articles_kpi_select_variable, sep = \" \"), type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  \n  output$PlotKpisAllVideosMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_all_videos, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$date >= year_selected & DataVideos$date < year_selected + years(1)),], .(date = format(DataVideos[which(DataVideos$date >= year_selected & DataVideos$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, video_views = sum(post_video_views))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_video_views <- cumsum(as.numeric(DataMonth$video_views))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$video_views))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_video_views)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$all_video_content_views)\n    })\n    \n    DataMonth <- ddply(DataVideos[which(format.Date(DataVideos$date, \"%m\") == format.Date(max(DataVideos$date), \"%m\") & format.Date(DataVideos$date, \"%Y\") == format.Date(max(DataVideos$date), \"%Y\")),], \"date\", summarize, video_views = sum(post_video_views))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(video_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"All Videos CV - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Views\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"All Videos CV Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"All Videos CV\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total All Videos CV\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisAllVideosTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$date >= \"2017-01-01\"),], .(date = format(DataVideos[which(DataVideos$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, video_views = sum(post_video_views))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"all_video_content_views\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$all_video_content_views-DataMonth$video_views)/DataMonth$all_video_content_views\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$video_views)),]\n    \n    DataMonth$all_video_content_views <- format( DataMonth$all_video_content_views, big.mark = \",\")\n    DataMonth$video_views <- format( DataMonth$video_views, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisAllVideos <- renderHighchart({\n    \n    if(input$all_videos_kpi_select_repost == \"Originals\"){\n      \n      DataVideos <- DataVideos[which(DataVideos$original == 1),]\n      \n    }\n    \n    else if (input$all_videos_kpi_select_repost == \"Reposts\"){\n      \n      DataVideos <- DataVideos[which(DataVideos$original == 0),]\n    }\n    \n    date_selected <- as.Date(paste(input$kpis_month_all_videos, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataVideos[which(format.Date(DataVideos$date, \"%m\") == month_selected & format.Date(DataVideos$date, \"%Y\") == year_selected),], \"date\", summarize, video_views = sum(post_video_views), interactions = sum(total_interactions), reach = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_video_views <- cumsum(DataMonth$video_views)\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    DataMonth$total_reach <- cumsum(DataMonth$reach)\n    \n    slope <- ifelse(input$all_videos_kpi_select_variable == \"Content Views\",lm(cumsum(video_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], ifelse(input$all_videos_kpi_select_variable == \"Interactions\", lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$all_videos_kpi_select_variable == \"Content Views\", DataMonth[x,]$video_views, ifelse(input$all_videos_kpi_select_variable == \"Interactions\", DataMonth[x,]$interactions, DataMonth[x,]$reach)))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$all_videos_kpi_select_variable == \"Content Views\", DataMonth[x,]$total_video_views, ifelse(input$all_videos_kpi_select_variable == \"Interactions\", DataMonth[x,]$total_interactions, DataMonth[x,]$total_reach)))\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$all_video_content_views, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_title(text = \"All Videos CV - Daily\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = input$all_videos_kpi_select_variable)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = paste(\"Daily\", input$all_videos_kpi_select_variable, sep = \" \"), type = \"column\") %>%\n      hc_add_series(data = ds_total, name = paste(\"Total\", input$all_videos_kpi_select_variable, sep = \" \"), type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  \n  output$PlotKpisVideosMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_videos, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$video_meme == 0 & DataVideos$date >= year_selected & DataVideos$date < year_selected + years(1)),], .(date = format(DataVideos[which(DataVideos$video_meme == 0 & DataVideos$date >= year_selected & DataVideos$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, video_views = sum(post_video_views))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_video_views <- cumsum(as.numeric(DataMonth$video_views))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$video_views))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_video_views)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$video_content_views)\n    })\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$video_meme == 0 & format.Date(DataVideos$date, \"%m\") == format.Date(max(DataVideos$date), \"%m\") & format.Date(DataVideos$date, \"%Y\") == format.Date(max(DataVideos$date), \"%Y\")),], \"date\", summarize, video_views = sum(post_video_views))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(video_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Videos CV - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Views\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Videos CV Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Videos CV\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Videos CV\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisVideosTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$video_meme == 0 & DataVideos$date >= \"2017-01-01\"),], .(date = format(DataVideos[which(DataVideos$video_meme == 0 & DataVideos$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, video_views = sum(post_video_views))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"video_content_views\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$video_content_views-DataMonth$video_views)/DataMonth$video_content_views\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$video_views)),]\n    \n    DataMonth$video_content_views <- format( DataMonth$video_content_views, big.mark = \",\")\n    DataMonth$video_views <- format( DataMonth$video_views, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisVideos <- renderHighchart({\n    \n    if(input$videos_kpi_select_repost == \"Originals\"){\n      \n      DataVideos <- DataVideos[which(DataVideos$original == 1),]\n      \n    }\n    \n    else if (input$videos_kpi_select_repost == \"Reposts\"){\n      \n      DataVideos <- DataVideos[which(DataVideos$original == 0),]\n    }\n    \n    date_selected <- as.Date(paste(input$kpis_month_videos, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$video_meme == 0 & format.Date(DataVideos$date, \"%m\") == month_selected & format.Date(DataVideos$date, \"%Y\") == year_selected),], \"date\", summarize, video_views = sum(post_video_views), interactions = sum(total_interactions), reach = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_video_views <- cumsum(DataMonth$video_views)\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    DataMonth$total_reach <- cumsum(DataMonth$reach)\n    \n    slope <- ifelse(input$videos_kpi_select_variable == \"Content Views\",lm(cumsum(video_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], ifelse(input$videos_kpi_select_variable == \"Interactions\", lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$videos_kpi_select_variable == \"Content Views\", DataMonth[x,]$video_views, ifelse(input$videos_kpi_select_variable == \"Interactions\", DataMonth[x,]$interactions, DataMonth[x,]$reach)))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$videos_kpi_select_variable == \"Content Views\", DataMonth[x,]$total_video_views, ifelse(input$videos_kpi_select_variable == \"Interactions\", DataMonth[x,]$total_interactions, DataMonth[x,]$total_reach)))\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$video_content_views, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_title(text = \"Videos CV - Daily\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = input$videos_kpi_select_variable)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = paste(\"Daily\", input$videos_kpi_select_variable, sep = \" \"), type = \"column\") %>%\n      hc_add_series(data = ds_total, name = paste(\"Total\", input$videos_kpi_select_variable, sep = \" \"), type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  \n  output$PlotKpisVideoMemesMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_video_memes, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$video_meme == 1 & DataVideos$date >= year_selected & DataVideos$date < year_selected + years(1)),], .(date = format(DataVideos[which(DataVideos$video_meme == 1 & DataVideos$date >= year_selected & DataVideos$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, video_views = sum(post_video_views))\n    \n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_video_views <- cumsum(as.numeric(DataMonth$video_views))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$video_views))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_video_views)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$video_meme_content_views)\n    })\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$video_meme == 1 & format.Date(DataVideos$date, \"%m\") == format.Date(max(DataVideos$date), \"%m\") & format.Date(DataVideos$date, \"%Y\") == format.Date(max(DataVideos$date), \"%Y\")),], \"date\", summarize, video_views = sum(post_video_views))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(video_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Video Memes CV - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Views\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Video Memes CV Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Video Memes CV\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Video Memes CV\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisVideoMemesTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$video_meme == 1 & DataVideos$date >= \"2017-01-01\"),], .(date = format(DataVideos[which(DataVideos$video_meme == 1 & DataVideos$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, video_views = sum(post_video_views))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"video_meme_content_views\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$video_meme_content_views-DataMonth$video_views)/DataMonth$video_meme_content_views\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$video_views)),]\n    \n    DataMonth$video_meme_content_views <- format( DataMonth$video_meme_content_views, big.mark = \",\")\n    DataMonth$video_views <- format( DataMonth$video_views, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisVideoMemes <- renderHighchart({\n    \n    if(input$video_memes_kpi_select_repost == \"Originals\"){\n      \n      DataVideos <- DataVideos[which(DataVideos$original == 1),]\n      \n    }\n    \n    else if (input$video_memes_kpi_select_repost == \"Reposts\"){\n      \n      DataVideos <- DataVideos[which(DataVideos$original == 0),]\n    }\n    \n    date_selected <- as.Date(paste(input$kpis_month_video_memes, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataVideos[which(DataVideos$video_meme == 1 & format.Date(DataVideos$date, \"%m\") == month_selected & format.Date(DataVideos$date, \"%Y\") == year_selected),], \"date\", summarize, video_views = sum(post_video_views), interactions = sum(total_interactions), reach = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_video_views <- cumsum(DataMonth$video_views)\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    DataMonth$total_reach <- cumsum(DataMonth$reach)\n    \n    slope <- ifelse(input$video_memes_kpi_select_variable == \"Content Views\",lm(cumsum(video_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], ifelse(input$video_memes_kpi_select_variable == \"Interactions\", lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], lm(cumsum(reach) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2]))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$video_memes_kpi_select_variable == \"Content Views\", DataMonth[x,]$video_views, ifelse(input$video_memes_kpi_select_variable == \"Interactions\", DataMonth[x,]$interactions, DataMonth[x,]$reach)))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$video_memes_kpi_select_variable == \"Content Views\", DataMonth[x,]$total_video_views, ifelse(input$video_memes_kpi_select_variable == \"Interactions\", DataMonth[x,]$total_interactions, DataMonth[x,]$total_reach)))\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$video_meme_content_views, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_title(text = \"Video Memes CV - Daily\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = input$video_memes_kpi_select_variable)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = paste(\"Daily\", input$video_memes_kpi_select_variable, sep = \" \"), type = \"column\") %>%\n      hc_add_series(data = ds_total, name = paste(\"Total\", input$video_memes_kpi_select_variable, sep = \" \"), type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  \n  \n  output$PlotKpisMemesMonth <- renderHighchart({\n    \n    year_selected <- as.Date(paste(input$kpis_year_memes, \"-01-01\", sep = \"\"))\n    \n    dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataPhotos[which(DataPhotos$date >= year_selected & DataPhotos$date < year_selected + years(1)),], .(date = format(DataPhotos[which(DataPhotos$date >= year_selected & DataPhotos$date < year_selected + years(1)),]$date, \"%Y-%m\")), summarize, photo_views = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth$total_photo_views <- cumsum(as.numeric(DataMonth$photo_views))\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = round(DataMonth[x,]$photo_views))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_photo_views)\n    })\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataGoal <- merge(dates, DataGoals[which(DataGoals$date >= format(year_selected, \"%Y-%m\") & DataGoals$date < format(year_selected + years(1), \"%Y-%m\")),], by = \"date\", all = TRUE)\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$meme_content_views)\n    })\n    \n    DataMonth <- ddply(DataPhotos[which(format.Date(DataPhotos$date, \"%m\") == format.Date(max(DataPhotos$date), \"%m\") & format.Date(DataPhotos$date, \"%Y\") == format.Date(max(DataPhotos$date), \"%Y\")),], \"date\", summarize, photo_views = sum(post_reach))\n    \n    DataForecast <- data.frame(date = format(DataMonth[1,]$date, \"%Y-%m\"), forecast = round((as.numeric(as.Date(format(max(Data$date), \"%Y-%m-01\")) %m+% months(1) - as.Date(format(max(Data$date), \"%Y-%m-01\"))))*(lm(cumsum(photo_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])))\n    \n    DataForecast <- merge(dates, DataForecast, by = \"date\", all = TRUE)\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"column\") %>%\n      hc_title(text = \"Memes CV - Monthly\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = \"Content Views\")) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds_goal, name = \"Memes CV Goal\", pointPadding = 0) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", color = \"#c91910\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds, name = \"Memes CV\", pointPadding = 0.2) %>%\n      hc_add_series(data = ds_total, name = \"Total Memes CV\", type = \"spline\", visible = FALSE) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(grouping = FALSE, shadow = FALSE, borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n  output$PlotKpisMemesTable <- DT::renderDataTable({\n    \n    dates <- data.frame(date = format(DataGoals$date, \"%Y-%m\"))\n    \n    DataMonth <- ddply(DataPhotos[which(DataPhotos$date >= \"2017-01-01\"),], .(date = format(DataPhotos[which(DataPhotos$date >= \"2017-01-01\"),]$date, \"%Y-%m\")), summarize, photo_views = sum(post_reach))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    \n    DataGoals$date <- format(DataGoals$date, \"%Y-%m\")\n    \n    DataMonth <- merge(DataGoals[, c(\"date\", \"meme_content_views\")], DataMonth, by = \"date\", all = TRUE)\n    \n    DataMonth$percent <- -(DataMonth$meme_content_views-DataMonth$photo_views)/DataMonth$meme_content_views\n    \n    DataMonth <- DataMonth[which(!is.na(DataMonth$photo_views)),]\n    \n    DataMonth$meme_content_views <- format( DataMonth$meme_content_views, big.mark = \",\")\n    DataMonth$photo_views <- format( DataMonth$photo_views, big.mark = \",\")\n    DataMonth$percent <- ifelse(DataMonth$percent <= 0, paste0(\"<span style = 'color:red'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"), paste0(\"<span style = 'color:green'>\",formatC(100*DataMonth$percent, format = \"f\", digits = 2), \"%\", \"</span>\"))\n    \n    colnames(DataMonth) <- c(\"Month\", \"Goal\", \"Actual\", \"%\")\n    \n    DataMonth\n    \n  }, escape = FALSE, rownames = FALSE, selection = \"single\", class = \"compact\", options = list(columnDefs = list(list(className = 'dt-center', targets = c(0:3))), dom = \"t\"))\n  \n  output$PlotKpisMemes <- renderHighchart({\n    \n    if(input$memes_kpi_select_repost == \"Originals\"){\n      \n      DataPhotos <- DataPhotos[which(DataPhotos$original == 1),]\n      \n    }\n    \n    else if (input$memes_kpi_select_repost == \"Reposts\"){\n      \n      DataPhotos <- DataPhotos[which(DataPhotos$original == 0),]\n    }\n    \n    date_selected <- as.Date(paste(input$kpis_month_memes, \"01\"), \"%b %Y %d\")\n    \n    month_selected <- format(date_selected, \"%m\")\n    year_selected <- format(date_selected,\"%Y\")\n    \n    dates <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"))\n    \n    DataMonth <- ddply(DataPhotos[which(format.Date(DataPhotos$date, \"%m\") == month_selected & format.Date(DataPhotos$date, \"%Y\") == year_selected),], \"date\", summarize, photo_views = sum(post_reach), interactions = sum(total_interactions))\n    \n    DataMonth <- merge(dates, DataMonth, by = \"date\", all = TRUE)\n    DataMonth[is.na(DataMonth) & DataMonth$date <= max(Data$date)] <- 0\n    DataMonth$total_photo_views <- cumsum(DataMonth$photo_views)\n    DataMonth$total_interactions <- cumsum(DataMonth$interactions)\n    \n    slope <- ifelse(input$memes_kpi_select_variable == \"Content Views\", lm(cumsum(photo_views) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2], lm(cumsum(interactions) ~ seq(1:nrow(DataMonth)), data = DataMonth)$coeff[2])\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$photo_views)\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = DataMonth[x,]$total_photo_views)\n    })\n    \n    ds <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$memes_kpi_select_variable == \"Content Views\", DataMonth[x,]$photo_views, DataMonth[x,]$interactions))\n    })\n    \n    ds_total <- lapply(1:nrow(DataMonth), function(x){\n      list(name = format(DataMonth[x,]$date, format = \"%b - %d\"), y = ifelse(input$memes_kpi_select_variable == \"Content Views\", DataMonth[x,]$total_photo_views, DataMonth[x,]$total_interactions))\n    })\n    \n    goal <- ifelse(format(date_selected, \"%Y-%m\") %in% DataGoals$date, DataGoals[which(DataGoals$date == format(date_selected, \"%Y-%m\")),]$meme_content_views, 0)\n    \n    DataGoal <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), goal = (seq(goal/nrow(dates), goal, by = goal/nrow(dates))))\n    \n    ds_goal <- lapply(1:nrow(DataGoal), function(x){\n      list(name = format(DataGoal[x,]$date, format = \"%b - %d\"), y = DataGoal[x,]$goal)\n    })\n    \n    DataForecast <- data.frame(date = seq(date_selected, date_selected %m+% months(1) - 1, by = \"day\"), forecast = (cumsum(rep(slope, nrow(dates)))))\n    \n    ds_forecast <- lapply(1:nrow(DataForecast), function(x){\n      list(name = format(DataForecast[x,]$date, format = \"%b - %d\"), y = DataForecast[x,]$forecast)\n    })\n    \n    hc <-highchart() %>%\n      hc_chart(type = \"waterfall\") %>%\n      hc_title(text = \"Memes CV - Daily\", align = \"center\") %>%\n      hc_xAxis(type = \"category\") %>%\n      hc_yAxis(title = list(text = input$memes_kpi_select_variable)) %>%\n      hc_legend(enabled = TRUE) %>%\n      hc_add_series(data = ds, name = paste(\"Daily\", input$memes_kpi_select_variable, sep = \" \"), type = \"column\") %>%\n      hc_add_series(data = ds_total, name = paste(\"Total\", input$memes_kpi_select_variable, sep = \" \"), type = \"spline\") %>%\n      hc_add_series(data = ds_goal, name = \"Goal\", type = \"spline\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_add_series(data = ds_forecast, name = \"Forecast\", type = \"spline\", color = \"#c91910\", tooltip = list(pointFormat = '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y:,.0f}</b><br/>')) %>%\n      hc_plotOptions(spline = list(marker = list(enabled = FALSE)), column = list(borderColor = \"black\")) %>%\n      hc_tooltip(shared = TRUE)%>% \n      hc_add_theme(hc_theme_smpl())\n    hc\n    \n  })\n  \n \n  ## Goal Simulation ----------------------------------------------------------------------------\n  \n  output$PlotArticlesDistributionLinkClicks <- renderPlot({\n    \n    article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 0, DataArticles$post_source_type == \"native\"),]$link_clicks\n    \n    n_articles <- fitdist((article_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_articles), legendtext = plot.legend)\n    # qqcomp(list(n_articles), legendtext = plot.legend)\n    cdfcomp(list(n_articles), legendtext = plot.legend)\n    # ppcomp(list(n_articles), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(article_data)\n    \n  })\n  \n  output$PlotArticlesLogDistributionLinkClicks <- renderPlot({\n    \n    article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 0, DataArticles$post_source_type == \"native\"),]$link_clicks\n    \n    n_articles <- fitdist(log(article_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_articles), legendtext = plot.legend)\n    # qqcomp(list(n_articles), legendtext = plot.legend)\n    cdfcomp(list(n_articles), legendtext = plot.legend)\n    # ppcomp(list(n_articles), legendtext = plot.legend)\n    \n    # hchart(log(article_data))\n  \n  })\n  \n  output$PlotArticlesRepostsDistributionLinkClicks <- renderPlot({\n    \n    article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 1, DataArticles$post_source_type == \"native\"),]$link_clicks\n    \n    n_articles <- fitdist((article_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_articles), legendtext = plot.legend)\n    # qqcomp(list(n_articles), legendtext = plot.legend)\n    cdfcomp(list(n_articles), legendtext = plot.legend)\n    # ppcomp(list(n_articles), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(article_data)\n    \n  })\n  \n  output$PlotArticlesRepostsLogDistributionLinkClicks <- renderPlot({\n    \n    article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 1, DataArticles$post_source_type == \"native\"),]$link_clicks\n    \n    n_articles <- fitdist(log(article_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_articles), legendtext = plot.legend)\n    # qqcomp(list(n_articles), legendtext = plot.legend)\n    cdfcomp(list(n_articles), legendtext = plot.legend)\n    # ppcomp(list(n_articles), legendtext = plot.legend)\n    \n    # hchart(log(article_data))\n    \n  })\n  \n  \n  output$PlotArticlesDistributionEngagements <- renderPlot({\n    \n    article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 0, DataArticles$post_source_type == \"native\"),]$total_interactions\n    \n    n_articles <- fitdist((article_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_articles), legendtext = plot.legend)\n    # qqcomp(list(n_articles), legendtext = plot.legend)\n    cdfcomp(list(n_articles), legendtext = plot.legend)\n    # ppcomp(list(n_articles), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(article_data)\n    \n  })\n  \n  output$PlotArticlesLogDistributionEngagements <- renderPlot({\n    \n    article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 0, DataArticles$post_source_type == \"native\"),]$total_interactions\n    \n    n_articles <- fitdist(log(article_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_articles), legendtext = plot.legend)\n    # qqcomp(list(n_articles), legendtext = plot.legend)\n    cdfcomp(list(n_articles), legendtext = plot.legend)\n    # ppcomp(list(n_articles), legendtext = plot.legend)\n    \n    # hchart(log(article_data))\n    \n  })\n  \n  output$PlotArticlesRepostsDistributionEngagements <- renderPlot({\n    \n    article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 1, DataArticles$post_source_type == \"native\"),]$total_interactions\n    \n    n_articles <- fitdist((article_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_articles), legendtext = plot.legend)\n    # qqcomp(list(n_articles), legendtext = plot.legend)\n    cdfcomp(list(n_articles), legendtext = plot.legend)\n    # ppcomp(list(n_articles), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(article_data)\n    \n  })\n  \n  output$PlotArticlesRepostsLogDistributionEngagements <- renderPlot({\n    \n    article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 1, DataArticles$post_source_type == \"native\"),]$total_interactions\n    \n    n_articles <- fitdist(log(article_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_articles), legendtext = plot.legend)\n    # qqcomp(list(n_articles), legendtext = plot.legend)\n    cdfcomp(list(n_articles), legendtext = plot.legend)\n    # ppcomp(list(n_articles), legendtext = plot.legend)\n    \n    # hchart(log(article_data))\n    \n  })\n  \n  \n  output$PlotArticlesDistributionReach <- renderPlot({\n    \n    article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 0, DataArticles$post_source_type == \"native\"),]$post_reach\n    \n    n_articles <- fitdist((article_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_articles), legendtext = plot.legend)\n    # qqcomp(list(n_articles), legendtext = plot.legend)\n    cdfcomp(list(n_articles), legendtext = plot.legend)\n    # ppcomp(list(n_articles), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(article_data)\n    \n  })\n  \n  output$PlotArticlesLogDistributionReach <- renderPlot({\n    \n    article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 0, DataArticles$post_source_type == \"native\"),]$post_reach\n    \n    n_articles <- fitdist(log(article_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_articles), legendtext = plot.legend)\n    # qqcomp(list(n_articles), legendtext = plot.legend)\n    cdfcomp(list(n_articles), legendtext = plot.legend)\n    # ppcomp(list(n_articles), legendtext = plot.legend)\n    \n    # hchart(log(article_data))\n    \n  })\n  \n  output$PlotArticlesRepostsDistributionReach <- renderPlot({\n    \n    article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 1, DataArticles$post_source_type == \"native\"),]$post_reach\n    \n    n_articles <- fitdist((article_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_articles), legendtext = plot.legend)\n    # qqcomp(list(n_articles), legendtext = plot.legend)\n    cdfcomp(list(n_articles), legendtext = plot.legend)\n    # ppcomp(list(n_articles), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(article_data)\n    \n  })\n  \n  output$PlotArticlesRepostsLogDistributionReach <- renderPlot({\n    \n    article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 1, DataArticles$post_source_type == \"native\"),]$post_reach\n    \n    n_articles <- fitdist(log(article_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_articles), legendtext = plot.legend)\n    # qqcomp(list(n_articles), legendtext = plot.legend)\n    cdfcomp(list(n_articles), legendtext = plot.legend)\n    # ppcomp(list(n_articles), legendtext = plot.legend)\n    \n    # hchart(log(article_data))\n    \n  })\n  \n  \n  \n  output$PlotVideosDistributionVideoViews <- renderPlot({\n    \n    video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$post_video_views\n    \n    n_videos <- fitdist((video_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_videos), legendtext = plot.legend)\n    # qqcomp(list(n_videos), legendtext = plot.legend)\n    cdfcomp(list(n_videos), legendtext = plot.legend)\n    # ppcomp(list(n_videos), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(video_data)\n    \n  })\n  \n  output$PlotVideosLogDistributionVideoViews <- renderPlot({\n    \n    video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$post_video_views\n    \n    n_videos <- fitdist(log(video_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_videos), legendtext = plot.legend)\n    # qqcomp(list(n_videos), legendtext = plot.legend)\n    cdfcomp(list(n_videos), legendtext = plot.legend)\n    # ppcomp(list(n_videos), legendtext = plot.legend)\n    \n    # hchart(log(video_data))\n    \n  })\n  \n  output$PlotVideosRepostsDistributionVideoViews <- renderPlot({\n    \n    video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$post_video_views\n    \n    n_videos <- fitdist((video_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_videos), legendtext = plot.legend)\n    # qqcomp(list(n_videos), legendtext = plot.legend)\n    cdfcomp(list(n_videos), legendtext = plot.legend)\n    # ppcomp(list(n_videos), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(video_data)\n    \n  })\n  \n  output$PlotVideosRepostsLogDistributionVideoViews <- renderPlot({\n    \n    video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$post_video_views\n    \n    n_videos <- fitdist(log(video_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_videos), legendtext = plot.legend)\n    # qqcomp(list(n_videos), legendtext = plot.legend)\n    cdfcomp(list(n_videos), legendtext = plot.legend)\n    # ppcomp(list(n_videos), legendtext = plot.legend)\n    \n    # hchart(log(video_data))\n    \n  })\n  \n  \n  output$PlotVideosDistributionEngagements <- renderPlot({\n    \n    video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$total_interactions\n    \n    n_videos <- fitdist((video_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_videos), legendtext = plot.legend)\n    # qqcomp(list(n_videos), legendtext = plot.legend)\n    cdfcomp(list(n_videos), legendtext = plot.legend)\n    # ppcomp(list(n_videos), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(video_data)\n    \n  })\n  \n  output$PlotVideosLogDistributionEngagements  <- renderPlot({\n    \n    video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$total_interactions\n    \n    n_videos <- fitdist(log(video_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_videos), legendtext = plot.legend)\n    # qqcomp(list(n_videos), legendtext = plot.legend)\n    cdfcomp(list(n_videos), legendtext = plot.legend)\n    # ppcomp(list(n_videos), legendtext = plot.legend)\n    \n    # hchart(log(video_data))\n    \n  })\n  \n  output$PlotVideosRepostsDistributionEngagements <- renderPlot({\n    \n    video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$total_interactions\n    \n    n_videos <- fitdist((video_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_videos), legendtext = plot.legend)\n    # qqcomp(list(n_videos), legendtext = plot.legend)\n    cdfcomp(list(n_videos), legendtext = plot.legend)\n    # ppcomp(list(n_videos), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(video_data)\n    \n  })\n  \n  output$PlotVideosRepostsLogDistributionEngagements  <- renderPlot({\n    \n    video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$total_interactions\n    \n    n_videos <- fitdist(log(video_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_videos), legendtext = plot.legend)\n    # qqcomp(list(n_videos), legendtext = plot.legend)\n    cdfcomp(list(n_videos), legendtext = plot.legend)\n    # ppcomp(list(n_videos), legendtext = plot.legend)\n    \n    # hchart(log(video_data))\n    \n  })\n  \n  \n  output$PlotVideosDistributionReach <- renderPlot({\n    \n    video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$post_reach\n    \n    n_videos <- fitdist((video_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_videos), legendtext = plot.legend)\n    # qqcomp(list(n_videos), legendtext = plot.legend)\n    cdfcomp(list(n_videos), legendtext = plot.legend)\n    # ppcomp(list(n_videos), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(video_data)\n    \n  })\n  \n  output$PlotVideosLogDistributionReach  <- renderPlot({\n    \n    video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$post_reach\n    \n    n_videos <- fitdist(log(video_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_videos), legendtext = plot.legend)\n    # qqcomp(list(n_videos), legendtext = plot.legend)\n    cdfcomp(list(n_videos), legendtext = plot.legend)\n    # ppcomp(list(n_videos), legendtext = plot.legend)\n    \n    # hchart(log(video_data))\n    \n  })\n  \n  output$PlotVideosRepostsDistributionReach <- renderPlot({\n    \n    video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$post_reach\n    \n    n_videos <- fitdist((video_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_videos), legendtext = plot.legend)\n    # qqcomp(list(n_videos), legendtext = plot.legend)\n    cdfcomp(list(n_videos), legendtext = plot.legend)\n    # ppcomp(list(n_videos), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(video_data)\n    \n  })\n  \n  output$PlotVideosRepostsLogDistributionReach  <- renderPlot({\n    \n    video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$post_reach\n    \n    n_videos <- fitdist(log(video_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_videos), legendtext = plot.legend)\n    # qqcomp(list(n_videos), legendtext = plot.legend)\n    cdfcomp(list(n_videos), legendtext = plot.legend)\n    # ppcomp(list(n_videos), legendtext = plot.legend)\n    \n    # hchart(log(video_data))\n    \n  })\n  \n  \n  \n  output$PlotVideoMemesDistributionVideoViews <- renderPlot({\n    \n    video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1 & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$post_video_views\n    n_video_memes <- fitdist((video_meme_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_video_memes), legendtext = plot.legend)\n    # qqcomp(list(n_video_memes), legendtext = plot.legend)\n    cdfcomp(list(n_video_memes), legendtext = plot.legend)\n    # ppcomp(list(n_video_memes), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(video_meme_data)\n    \n  })\n  \n  output$PlotVideoMemesLogDistributionVideoViews <- renderPlot({\n    \n    video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1 & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$post_video_views\n    n_video_memes <- fitdist(log(video_meme_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_video_memes), legendtext = plot.legend)\n    # qqcomp(list(n_video_memes), legendtext = plot.legend)\n    cdfcomp(list(n_video_memes), legendtext = plot.legend)\n    # ppcomp(list(n_video_memes), legendtext = plot.legend)\n    \n    \n  })\n  \n  output$PlotVideoMemesRepostsDistributionVideoViews <- renderPlot({\n    \n    video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1 & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$post_video_views\n    n_video_memes <- fitdist((video_meme_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_video_memes), legendtext = plot.legend)\n    # qqcomp(list(n_video_memes), legendtext = plot.legend)\n    cdfcomp(list(n_video_memes), legendtext = plot.legend)\n    # ppcomp(list(n_video_memes), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(video_meme_data)\n    \n  })\n  \n  output$PlotVideoMemesRepostsLogDistributionVideoViews <- renderPlot({\n    \n    video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1 & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$post_video_views\n    n_video_memes <- fitdist(log(video_meme_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_video_memes), legendtext = plot.legend)\n    # qqcomp(list(n_video_memes), legendtext = plot.legend)\n    cdfcomp(list(n_video_memes), legendtext = plot.legend)\n    # ppcomp(list(n_video_memes), legendtext = plot.legend)\n    \n    \n  })\n  \n  \n  output$PlotVideoMemesDistributionEngagements <- renderPlot({\n    \n    video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1 & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$total_interactions\n    n_video_memes <- fitdist((video_meme_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_video_memes), legendtext = plot.legend)\n    # qqcomp(list(n_video_memes), legendtext = plot.legend)\n    cdfcomp(list(n_video_memes), legendtext = plot.legend)\n    # ppcomp(list(n_video_memes), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(video_meme_data)\n    \n  })\n  \n  output$PlotVideoMemesLogDistributionEngagements <- renderPlot({\n    \n    video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1 & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$total_interactions\n    n_video_memes <- fitdist(log(video_meme_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_video_memes), legendtext = plot.legend)\n    # qqcomp(list(n_video_memes), legendtext = plot.legend)\n    cdfcomp(list(n_video_memes), legendtext = plot.legend)\n    # ppcomp(list(n_video_memes), legendtext = plot.legend)\n    \n    \n  })\n  \n  output$PlotVideoMemesRepostsDistributionEngagements <- renderPlot({\n    \n    video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1 & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$total_interactions\n    n_video_memes <- fitdist((video_meme_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_video_memes), legendtext = plot.legend)\n    # qqcomp(list(n_video_memes), legendtext = plot.legend)\n    cdfcomp(list(n_video_memes), legendtext = plot.legend)\n    # ppcomp(list(n_video_memes), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(video_meme_data)\n    \n  })\n  \n  output$PlotVideoMemesRepostsLogDistributionEngagements <- renderPlot({\n    \n    video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1 & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$total_interactions\n    n_video_memes <- fitdist(log(video_meme_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_video_memes), legendtext = plot.legend)\n    # qqcomp(list(n_video_memes), legendtext = plot.legend)\n    cdfcomp(list(n_video_memes), legendtext = plot.legend)\n    # ppcomp(list(n_video_memes), legendtext = plot.legend)\n    \n    \n  })\n  \n  \n  output$PlotVideoMemesDistributionReach <- renderPlot({\n    \n    video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1 & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$post_reach\n    n_video_memes <- fitdist((video_meme_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_video_memes), legendtext = plot.legend)\n    # qqcomp(list(n_video_memes), legendtext = plot.legend)\n    cdfcomp(list(n_video_memes), legendtext = plot.legend)\n    # ppcomp(list(n_video_memes), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(video_meme_data)\n    \n  })\n  \n  output$PlotVideoMemesLogDistributionReach <- renderPlot({\n    \n    video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1 & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$post_reach\n    n_video_memes <- fitdist(log(video_meme_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_video_memes), legendtext = plot.legend)\n    # qqcomp(list(n_video_memes), legendtext = plot.legend)\n    cdfcomp(list(n_video_memes), legendtext = plot.legend)\n    # ppcomp(list(n_video_memes), legendtext = plot.legend)\n    \n    \n  })\n  \n  output$PlotVideoMemesRepostsDistributionReach <- renderPlot({\n    \n    video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1 & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$post_reach\n    n_video_memes <- fitdist((video_meme_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_video_memes), legendtext = plot.legend)\n    # qqcomp(list(n_video_memes), legendtext = plot.legend)\n    cdfcomp(list(n_video_memes), legendtext = plot.legend)\n    # ppcomp(list(n_video_memes), legendtext = plot.legend)\n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(video_meme_data)\n    \n  })\n  \n  output$PlotVideoMemesRepostsLogDistributionReach <- renderPlot({\n    \n    video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1 & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$post_reach\n    n_video_memes <- fitdist(log(video_meme_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_video_memes), legendtext = plot.legend)\n    # qqcomp(list(n_video_memes), legendtext = plot.legend)\n    cdfcomp(list(n_video_memes), legendtext = plot.legend)\n    # ppcomp(list(n_video_memes), legendtext = plot.legend)\n    \n    \n  })\n  \n  \n  output$PlotMemesDistributionReach <- renderPlot({\n    \n    meme_data <- DataPhotos[which(DataPhotos$date >= input$model_date_range[1] & DataPhotos$date < input$model_date_range[2] & DataPhotos$repost == 0, DataPhotos$post_source_type == \"native\"),]$post_reach\n   \n    n_memes <- fitdist((meme_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_memes), legendtext = plot.legend)\n    # qqcomp(list(n_memes), legendtext = plot.legend)\n    cdfcomp(list(n_memes), legendtext = plot.legend)\n    # ppcomp(list(n_memes), legendtext = plot.legend)\n    \n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(meme_data)\n    \n  })\n  \n  output$PlotMemesLogDistributionReach <- renderPlot({\n    \n    meme_data <- DataPhotos[which(DataPhotos$date >= input$model_date_range[1] & DataPhotos$date < input$model_date_range[2] & DataPhotos$repost == 0, DataPhotos$post_source_type == \"native\"),]$post_reach\n    \n    n_memes <- fitdist(log(meme_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_memes), legendtext = plot.legend)\n    # qqcomp(list(n_memes), legendtext = plot.legend)\n    cdfcomp(list(n_memes), legendtext = plot.legend)\n    # ppcomp(list(n_memes), legendtext = plot.legend)\n    \n    \n    # hchart(log(meme_data))\n    \n  })\n  \n  output$PlotMemesRepostsDistributionReach <- renderPlot({\n    \n    meme_data <- DataPhotos[which(DataPhotos$date >= input$model_date_range[1] & DataPhotos$date < input$model_date_range[2] & DataPhotos$repost == 1, DataPhotos$post_source_type == \"native\"),]$post_reach\n    \n    n_memes <- fitdist((meme_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_memes), legendtext = plot.legend)\n    # qqcomp(list(n_memes), legendtext = plot.legend)\n    cdfcomp(list(n_memes), legendtext = plot.legend)\n    # ppcomp(list(n_memes), legendtext = plot.legend)\n    \n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(meme_data)\n    \n  })\n  \n  output$PlotMemesRepostsLogDistributionReach <- renderPlot({\n    \n    meme_data <- DataPhotos[which(DataPhotos$date >= input$model_date_range[1] & DataPhotos$date < input$model_date_range[2] & DataPhotos$repost == 1, DataPhotos$post_source_type == \"native\"),]$post_reach\n    \n    n_memes <- fitdist(log(meme_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_memes), legendtext = plot.legend)\n    # qqcomp(list(n_memes), legendtext = plot.legend)\n    cdfcomp(list(n_memes), legendtext = plot.legend)\n    # ppcomp(list(n_memes), legendtext = plot.legend)\n    \n    \n    # hchart(log(meme_data))\n    \n  })\n  \n  output$PlotMemesDistributionEngagements <- renderPlot({\n    \n    meme_data <- DataPhotos[which(DataPhotos$date >= input$model_date_range[1] & DataPhotos$date < input$model_date_range[2] & DataPhotos$repost == 0, DataPhotos$post_source_type == \"native\"),]$total_interactions\n    \n    n_memes <- fitdist((meme_data), \"lnorm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Lognormal\")\n    denscomp(list(n_memes), legendtext = plot.legend)\n    # qqcomp(list(n_memes), legendtext = plot.legend)\n    cdfcomp(list(n_memes), legendtext = plot.legend)\n    # ppcomp(list(n_memes), legendtext = plot.legend)\n    \n    \n    # histogram <- hist(article_data, breaks = 100, plot = FALSE)\n    # hchart(meme_data)\n    \n  })\n  \n  output$PlotMemesLogDistributionEngagements <- renderPlot({\n    \n    meme_data <- DataPhotos[which(DataPhotos$date >= input$model_date_range[1] & DataPhotos$date < input$model_date_range[2] & DataPhotos$repost == 0, DataPhotos$post_source_type == \"native\"),]$total_interactions\n    \n    n_memes <- fitdist(log(meme_data), \"norm\")\n    par(mfrow = c(1, 2))\n    plot.legend <- c(\"Normal\")\n    denscomp(list(n_memes), legendtext = plot.legend)\n    # qqcomp(list(n_memes), legendtext = plot.legend)\n    cdfcomp(list(n_memes), legendtext = plot.legend)\n    # ppcomp(list(n_memes), legendtext = plot.legend)\n    \n    \n    # hchart(log(meme_data))\n    \n  })\n  \n  \n  \n  \n  output$PlotPageSimlatedLogDistributionContentViews <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 0, DataArticles$post_source_type == \"native\"),]$link_clicks\n      \n      video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$post_video_views\n      \n      video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1  & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$post_video_views\n      \n      meme_data <- DataPhotos[which(DataPhotos$date >= input$model_date_range[1] & DataPhotos$date < input$model_date_range[2] & DataPhotos$repost == 0, DataPhotos$post_source_type == \"native\"),]$post_reach\n      \n      \n      article_data_repo <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 1, DataArticles$post_source_type == \"native\"),]$link_clicks\n      \n      video_data_repo <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$post_video_views\n      \n      video_meme_data_repo <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1  & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$post_video_views\n      \n      meme_data_repo <- DataPhotos[which(DataPhotos$date >= input$model_date_range[1] & DataPhotos$date < input$model_date_range[2] & DataPhotos$repost == 1, DataPhotos$post_source_type == \"native\"),]$post_reach\n      \n      \n      set.seed(0)\n      \n      n_articles <- fitdist(log(article_data), \"norm\")\n      n_videos <- fitdist(log(video_data), \"norm\")\n      n_video_memes <- fitdist(log(video_meme_data), \"norm\")\n      n_memes <- fitdist(log(meme_data), \"norm\")\n      \n      n_articles_repo <- fitdist(log(article_data_repo), \"norm\")\n      n_videos_repo <- fitdist(log(video_data_repo), \"norm\")\n      n_video_memes_repo <- fitdist(log(video_meme_data_repo), \"norm\")\n      n_memes_repo <- fitdist(log(meme_data_repo), \"norm\")\n      \n      monte_carlo_articles <- NA\n      monte_carlo_videos <- NA\n      monte_carlo_video_memes <- NA\n      monte_carlo_memes <- NA\n      \n      monte_carlo_articles_repo <- NA\n      monte_carlo_videos_repo <- NA\n      monte_carlo_video_memes_repo <- NA\n      monte_carlo_memes_repo <- NA\n   \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_articles[i] <- sum(exp(rnorm(input$model_num_articles, mean = n_articles$estimate[1], sd = n_articles$estimate[2])))\n        monte_carlo_videos[i] <- sum(exp(rnorm(input$model_num_videos, mean = n_videos$estimate[1], sd = n_videos$estimate[2])))\n        monte_carlo_video_memes[i] <- sum(exp(rnorm(input$model_num_video_memes, mean = n_video_memes$estimate[1], sd = n_video_memes$estimate[2])))\n        monte_carlo_memes[i] <- sum(exp(rnorm(input$model_num_memes, mean = n_memes$estimate[1], sd = n_memes$estimate[2])))\n        \n        monte_carlo_articles_repo[i] <- sum(exp(rnorm(input$model_num_articles_reposts, mean = n_articles_repo$estimate[1], sd = n_articles_repo$estimate[2])))\n        monte_carlo_videos_repo[i] <- sum(exp(rnorm(input$model_num_videos_reposts, mean = n_videos_repo$estimate[1], sd = n_videos_repo$estimate[2])))\n        monte_carlo_video_memes_repo[i] <- sum(exp(rnorm(input$model_num_video_memes_reposts, mean = n_video_memes_repo$estimate[1], sd = n_video_memes_repo$estimate[2])))\n        monte_carlo_memes_repo[i] <- sum(exp(rnorm(input$model_num_memes_reposts, mean = n_memes_repo$estimate[1], sd = n_memes_repo$estimate[2])))\n\n      }\n      \n      monte_carlo_page <- monte_carlo_articles + monte_carlo_videos + monte_carlo_video_memes + monte_carlo_memes + monte_carlo_articles_repo + monte_carlo_videos_repo + monte_carlo_video_memes_repo + monte_carlo_memes_repo\n      \n      plot_histogram(monte_carlo_page, x_var = \"Content Views\", title = \"WAM\")\n      \n    })\n    \n  })\n  \n  \n  output$PlotArticleSimlatedLogDistributionLinkClicks <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n    article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 0, DataArticles$post_source_type == \"native\"),]$link_clicks\n    \n    set.seed(0)\n    \n    n_articles <- fitdist(log(article_data), \"norm\")\n      \n    monte_carlo_articles <- NA\n \n    for(i in 1:input$model_num_simulations){\n      \n      monte_carlo_articles[i] <- sum(exp(rnorm(input$model_num_articles, mean = n_articles$estimate[1], sd = n_articles$estimate[2])))\n     \n    }\n\n    plot_histogram(monte_carlo_articles, x_var = \"Link Clicks\", title = \"Originals\")\n\n    })\n    \n  })\n  \n  output$PlotArticleSimlatedLogDistributionEngagements <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 0, DataArticles$post_source_type == \"native\"),]$total_interactions\n      \n      set.seed(0)\n      \n      n_articles <- fitdist(log(article_data), \"norm\")\n      \n      monte_carlo_articles <- NA\n     \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_articles[i] <- sum(exp(rnorm(input$model_num_articles, mean = n_articles$estimate[1], sd = n_articles$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_articles, x_var = \"Engagements\", title = \"Originals\")\n     \n    })\n    \n  })\n  \n  output$PlotArticleSimlatedLogDistributionReach <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 0, DataArticles$post_source_type == \"native\"),]$post_reach\n      \n      set.seed(0)\n      \n      n_articles <- fitdist(log(article_data), \"norm\")\n      \n      monte_carlo_articles <- NA\n      \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_articles[i] <- sum(exp(rnorm(input$model_num_articles, mean = n_articles$estimate[1], sd = n_articles$estimate[2])))\n       \n      }\n      \n      plot_histogram(monte_carlo_articles, x_var = \"Reach\", title = \"Originals\")\n      \n    })\n    \n  })\n  \n  output$PlotArticleRepostSimlatedLogDistributionLinkClicks <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 1, DataArticles$post_source_type == \"native\"),]$link_clicks\n      \n      set.seed(0)\n      \n      n_articles <- fitdist(log(article_data), \"norm\")\n      \n      monte_carlo_articles <- NA\n      \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_articles[i] <- sum(exp(rnorm(input$model_num_articles_reposts, mean = n_articles$estimate[1], sd = n_articles$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_articles, x_var = \"Link Clicks\", title = \"Reposts\")\n      \n    })\n    \n  })\n  \n  output$PlotArticleRepostsSimlatedLogDistributionEngagements <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 1, DataArticles$post_source_type == \"native\"),]$total_interactions\n      \n      set.seed(0)\n      \n      n_articles <- fitdist(log(article_data), \"norm\")\n      \n      monte_carlo_articles <- NA\n      \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_articles[i] <- sum(exp(rnorm(input$model_num_articles_reposts, mean = n_articles$estimate[1], sd = n_articles$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_articles, x_var = \"Engagements\", title = \"Reposts\")\n      \n    })\n    \n  })\n  \n  output$PlotArticleRepostsSimlatedLogDistributionReach <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      article_data <- DataArticles[which(DataArticles$date >= input$model_date_range[1] & DataArticles$date < input$model_date_range[2] & DataArticles$repost == 1, DataArticles$post_source_type == \"native\"),]$post_reach\n      \n      set.seed(0)\n      \n      n_articles <- fitdist(log(article_data), \"norm\")\n      \n      monte_carlo_articles <- NA\n      \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_articles[i] <- sum(exp(rnorm(input$model_num_articles_reposts, mean = n_articles$estimate[1], sd = n_articles$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_articles, x_var = \"Reach\", title = \"Reposts\")\n      \n    })\n    \n  })\n  \n  \n  output$PlotVideoSimlatedLogDistributionVideoViews <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$post_video_views\n      \n      set.seed(0)\n      \n      n_videos <- fitdist(log(video_data), \"norm\")\n      \n      monte_carlo_videos <- NA\n      \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_videos[i] <- sum(exp(rnorm(input$model_num_videos, mean = n_videos$estimate[1], sd = n_videos$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_videos, x_var = \"Video Views\", title = \"Originals\")\n      \n    })\n    \n  })\n  \n  output$PlotVideoSimlatedLogDistributionEngagements <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$total_interactions\n      \n      set.seed(0)\n      \n      n_videos <- fitdist(log(video_data), \"norm\")\n      \n      monte_carlo_videos <- NA\n  \n      for(i in 1:input$model_num_simulations){\n       \n        monte_carlo_videos[i] <- sum(exp(rnorm(input$model_num_videos, mean = n_videos$estimate[1], sd = n_videos$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_videos, x_var = \"Engagements\", title = \"Originals\")\n      \n    })\n    \n  })\n  \n  output$PlotVideoSimlatedLogDistributionReach <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$post_reach\n      \n      set.seed(0)\n      \n      n_videos <- fitdist(log(video_data), \"norm\")\n      \n      monte_carlo_videos <- NA\n      \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_videos[i] <- sum(exp(rnorm(input$model_num_videos, mean = n_videos$estimate[1], sd = n_videos$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_videos, x_var = \"Reach\", title = \"Originals\")\n      \n    })\n    \n  })\n  \n  output$PlotVideoRepostsSimlatedLogDistributionVideoViews <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$post_video_views\n      \n      set.seed(0)\n      \n      n_videos <- fitdist(log(video_data), \"norm\")\n      \n      monte_carlo_videos <- NA\n      \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_videos[i] <- sum(exp(rnorm(input$model_num_videos_reposts, mean = n_videos$estimate[1], sd = n_videos$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_videos, x_var = \"Video Views\", title = \"Reposts\")\n      \n    })\n    \n  })\n  \n  output$PlotVideoRepostsSimlatedLogDistributionEngagements <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$total_interactions\n      \n      set.seed(0)\n      \n      n_videos <- fitdist(log(video_data), \"norm\")\n      \n      monte_carlo_videos <- NA\n      \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_videos[i] <- sum(exp(rnorm(input$model_num_videos_reposts, mean = n_videos$estimate[1], sd = n_videos$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_videos, x_var = \"Engagements\", title = \"Reposts\")\n      \n    })\n    \n  })\n  \n  output$PlotVideoRepostsSimlatedLogDistributionReach <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      video_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 0  & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$post_reach\n      \n      set.seed(0)\n      \n      n_videos <- fitdist(log(video_data), \"norm\")\n      \n      monte_carlo_videos <- NA\n      \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_videos[i] <- sum(exp(rnorm(input$model_num_videos_reposts, mean = n_videos$estimate[1], sd = n_videos$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_videos, x_var = \"Reach\", title = \"Reposts\", title = \"Reposts\")\n      \n    })\n    \n  })\n  \n  \n  output$PlotVideosMemeSimlatedLogDistributionVideoViews <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1  & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$post_video_views\n      set.seed(0)\n      \n      n_video_memes <- fitdist(log(video_meme_data), \"norm\")\n      \n      monte_carlo_video_memes <- NA\n      \n      for(i in 1:input$model_num_simulations){\n       \n        monte_carlo_video_memes[i] <- sum(exp(rnorm(input$model_num_video_memes, mean = n_video_memes$estimate[1], sd = n_video_memes$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_video_memes, x_var = \"Video Views\", title = \"Originals\")\n      \n    })\n    \n  })\n  \n  output$PlotVideosMemeSimlatedLogDistributionEngagements <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1  & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$total_interactions\n      set.seed(0)\n      \n      n_video_memes <- fitdist(log(video_meme_data), \"norm\")\n      \n      monte_carlo_video_memes <- NA\n      \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_video_memes[i] <- sum(exp(rnorm(input$model_num_video_memes, mean = n_video_memes$estimate[1], sd = n_video_memes$estimate[2])))\n       \n      }\n      \n      plot_histogram(monte_carlo_video_memes, x_var = \"Engagements\", title = \"Originals\")\n      \n    })\n    \n  })\n  \n  output$PlotVideosMemeSimlatedLogDistributionReach <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1  & DataVideos$repost == 0, DataVideos$post_source_type == \"native\"),]$post_reach\n      set.seed(0)\n      \n      n_video_memes <- fitdist(log(video_meme_data), \"norm\")\n      \n      monte_carlo_video_memes <- NA\n      \n      for(i in 1:input$model_num_simulations){\n       \n        monte_carlo_video_memes[i] <- sum(exp(rnorm(input$model_num_video_memes, mean = n_video_memes$estimate[1], sd = n_video_memes$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_video_memes, x_var = \"Reach\", title = \"Originals\")\n   \n    })\n    \n  })\n  \n  output$PlotVideosMemeRepostsSimlatedLogDistributionVideoViews <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1  & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$post_video_views\n      set.seed(0)\n      \n      n_video_memes <- fitdist(log(video_meme_data), \"norm\")\n      \n      monte_carlo_video_memes <- NA\n      \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_video_memes[i] <- sum(exp(rnorm(input$model_num_video_memes_reposts, mean = n_video_memes$estimate[1], sd = n_video_memes$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_video_memes, x_var = \"Video Views\", title = \"Reposts\")\n      \n    })\n    \n  })\n  \n  output$PlotVideosMemeRepostsSimlatedLogDistributionEngagements <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1  & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$total_interactions\n      set.seed(0)\n      \n      n_video_memes <- fitdist(log(video_meme_data), \"norm\")\n      \n      monte_carlo_video_memes <- NA\n      \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_video_memes[i] <- sum(exp(rnorm(input$model_num_video_memes_reposts, mean = n_video_memes$estimate[1], sd = n_video_memes$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_video_memes, x_var = \"Engagements\", title = \"Reposts\")\n      \n    })\n    \n  })\n  \n  output$PlotVideosMemeRepostsSimlatedLogDistributionReach <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      video_meme_data <- DataVideos[which(DataVideos$date >= input$model_date_range[1] & DataVideos$date < input$model_date_range[2] & DataVideos$video_meme == 1  & DataVideos$repost == 1, DataVideos$post_source_type == \"native\"),]$post_reach\n      set.seed(0)\n      \n      n_video_memes <- fitdist(log(video_meme_data), \"norm\")\n      \n      monte_carlo_video_memes <- NA\n      \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_video_memes[i] <- sum(exp(rnorm(input$model_num_video_memes_reposts, mean = n_video_memes$estimate[1], sd = n_video_memes$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_video_memes, x_var = \"Reach\")\n      \n    })\n    \n  })\n  \n  \n  \n  output$PlotMemeSimlatedLogDistributionEngagements <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      meme_data <- DataPhotos[which(DataPhotos$date >= input$model_date_range[1] & DataPhotos$date < input$model_date_range[2] & DataPhotos$repost == 0, DataPhotos$post_source_type == \"native\"),]$total_interactions\n      \n      set.seed(0)\n      \n      n_memes <- fitdist(log(meme_data), \"norm\")\n      \n      monte_carlo_memes <- NA\n    \n      for(i in 1:input$model_num_simulations){\n       \n        monte_carlo_memes[i] <- sum(exp(rnorm(input$model_num_memes, mean = n_memes$estimate[1], sd = n_memes$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_memes, x_var = \"Engagements\", title = \"Originals\")\n      \n    })\n    \n  })\n  \n  output$PlotMemeSimlatedLogDistributionReach <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      meme_data <- DataPhotos[which(DataPhotos$date >= input$model_date_range[1] & DataPhotos$date < input$model_date_range[2] & DataPhotos$repost == 0, DataPhotos$post_source_type == \"native\"),]$post_reach\n      \n      set.seed(0)\n      \n      n_memes <- fitdist(log(meme_data), \"norm\")\n      \n      monte_carlo_memes <- NA\n   \n      for(i in 1:input$model_num_simulations){\n   \n        monte_carlo_memes[i] <- sum(exp(rnorm(input$model_num_memes, mean = n_memes$estimate[1], sd = n_memes$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_memes, x_var = \"Reach\", title = \"Originals\")\n       \n    })\n    \n  })\n  \n  output$PlotMemeRepostsSimlatedLogDistributionEngagements <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      meme_data <- DataPhotos[which(DataPhotos$date >= input$model_date_range[1] & DataPhotos$date < input$model_date_range[2] & DataPhotos$repost == 1, DataPhotos$post_source_type == \"native\"),]$total_interactions\n      \n      set.seed(0)\n      \n      n_memes <- fitdist(log(meme_data), \"norm\")\n      \n      monte_carlo_memes <- NA\n      \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_memes[i] <- sum(exp(rnorm(input$model_num_memes_reposts, mean = n_memes$estimate[1], sd = n_memes$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_memes, x_var = \"Engagements\", title = \"Reposts\")\n      \n    })\n    \n  })\n  \n  output$PlotMemeRepostsSimlatedLogDistributionReach <- renderPlot({\n    \n    input$model_simulation_button\n    isolate({  \n      \n      meme_data <- DataPhotos[which(DataPhotos$date >= input$model_date_range[1] & DataPhotos$date < input$model_date_range[2] & DataPhotos$repost == 1, DataPhotos$post_source_type == \"native\"),]$post_reach\n      \n      set.seed(0)\n      \n      n_memes <- fitdist(log(meme_data), \"norm\")\n      \n      monte_carlo_memes <- NA\n      \n      for(i in 1:input$model_num_simulations){\n        \n        monte_carlo_memes[i] <- sum(exp(rnorm(input$model_num_memes_reposts, mean = n_memes$estimate[1], sd = n_memes$estimate[2])))\n        \n      }\n      \n      plot_histogram(monte_carlo_memes, x_var = \"Reach\", title = \"Reposts\")\n      \n    })\n    \n  })\n  \n  }\n\n\n# SHINY APP =========================================================================================================================\n\nshinyApp(ui = ui, server = server)",
    "created" : 1502300066249.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "637|38|694|2|\n696|39|754|2|\n756|39|813|2|\n815|39|870|2|\n872|61|888|2|\n890|72|908|2|\n910|56|941|2|\n943|60|969|2|\n971|51|1032|2|\n1035|63|1066|2|\n1068|67|1094|2|\n1096|58|1155|2|\n1158|61|1189|2|\n1191|65|1217|2|\n1219|61|1227|2|\n1229|56|1287|2|\n1290|60|1321|2|\n1323|64|1349|2|\n1351|60|1359|2|\n1361|55|1417|2|\n1422|52|1460|2|\n1462|61|1490|2|\n1494|55|1546|2|\n1548|59|1572|2|\n1574|50|1632|2|\n1638|48|1690|2|\n1692|48|1700|2|\n1702|43|1758|2|\n1762|53|1815|2|\n1817|53|1825|2|\n1827|47|1881|2|\n1885|55|1941|2|\n1943|59|1971|2|\n1973|50|2032|2|\n2036|51|2088|2|\n2090|55|2114|2|\n2116|46|2183|2|\n2187|52|2239|2|\n2241|56|2265|2|\n2267|47|2334|2|\n2338|49|2390|2|\n2392|53|2416|2|\n2418|44|2485|2|\n2489|53|2542|2|\n2544|57|2568|2|\n2570|48|2637|2|\n2641|48|2693|2|\n2695|52|2719|2|\n2721|43|2795|2|\n2817|62|2831|2|\n2833|66|2848|2|\n2850|69|2864|2|\n2867|60|2882|2|\n2884|63|2898|2|\n2900|67|2915|2|\n2917|70|2931|2|\n2934|54|2949|2|\n2951|57|2965|2|\n2967|61|2982|2|\n2984|64|2998|2|\n3002|57|3017|2|\n3019|60|3033|2|\n3035|64|3050|2|\n3052|67|3066|2|\n3069|58|3084|2|\n3086|62|3100|2|\n3102|65|3117|2|\n3119|69|3133|2|\n3136|52|3151|2|\n3153|56|3167|2|\n3169|59|3184|2|\n3186|63|3200|2|\n3204|61|3218|2|\n3220|64|3232|2|\n3234|68|3248|2|\n3250|71|3262|2|\n3265|62|3279|2|\n3281|65|3293|2|\n3295|69|3309|2|\n3311|72|3323|2|\n3326|56|3340|2|\n3342|59|3354|2|\n3356|63|3370|2|\n3372|66|3384|2|\n3387|51|3403|2|\n3405|54|3420|2|\n3422|58|3438|2|\n3440|61|3455|2|\n3457|57|3473|2|\n3475|60|3490|2|\n3495|68|3560|2|\n3563|69|3586|2|\n3588|70|3611|2|\n3613|64|3636|2|\n3638|75|3661|2|\n3663|77|3686|2|\n3688|71|3711|2|\n3714|67|3737|2|\n3739|68|3762|2|\n3764|62|3787|2|\n3789|74|3812|2|\n3814|75|3837|2|\n3839|69|3862|2|\n3865|72|3887|2|\n3889|73|3911|2|\n3913|67|3935|2|\n3937|79|3959|2|\n3961|80|3983|2|\n3985|74|4007|2|\n4011|67|4034|2|\n4036|61|4059|2|\n4061|74|4084|2|\n4086|68|4109|2|\n",
    "hash" : "2242851019",
    "id" : "7BD7E17D",
    "lastKnownWriteTime" : 1504293569,
    "last_content_update" : 1504293569790,
    "path" : "~/KPIs/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}