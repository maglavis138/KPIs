WamPageData <- fetch(rs, -1)
WamPageData$date <- as.Date(WamPageData$date)
dbClearResult(rs)
dbDisconnect(mydb)
load("data/DataArticles.Rda")
load("data/DataVideos.Rda")
load("data/DataPhotos.Rda")
load("data/PostData.Rda")
DataGoals <- read.csv("data/WAM KPIs 2017.csv", header = TRUE, stringsAsFactors = FALSE)
DataGoals$date <- strptime(DataGoals$date, "%d/%m/%Y")
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
options(highcharter.lang = hcoptslang)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
rm(list = ls())
library(RMySQL)
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
rs <- dbSendQuery(mydb, "select * from PAGE_DATA where from_name = 'We are mitu'")
WamPageData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from FEED_DATA")
WamFeedData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA")
WamFeedData <- fetch(rs, -1)
WamPageData$date <- as.Date(WamPageData$date)
dbClearResult(rs)
dbDisconnect(mydb)
rm(list = ls())
library(RMySQL)
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
rs <- dbSendQuery(mydb, "select * from PAGE_DATA where from_name = 'We are mitu'")
WamPageData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from FEED_DATA")
WamFeedData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA")
WamPostData <- fetch(rs, -1)
dbClearResult(rs)
dbDisconnect(mydb)
View(WamFeedData)
Data <- merge(WamFeedData, WamPostData, by = "status_id", all.x = TRUE)
View(Data)
View(Data)
PostData <- merge(WamFeedData, WamPostData, by = "status_id", all.x = TRUE)
LinkData <- read.csv("data/LinkData.csv", header = TRUE, stringsAsFactors = FALSE)
VideoData <- read.csv("data/VideoData.csv", header = TRUE, stringsAsFactors = FALSE)
PhotoData <- read.csv("data/PhotoData.csv", header = TRUE, stringsAsFactors = FALSE)
Data <- Data[!duplicated(Data),]
Data$created_time <- as.POSIXct(strptime(Data$created_time, "%d/%m/%Y %H:%M"), tz = "GMT")
Data$date = strptime(Data$date, "%d/%m/%Y")
Data$date <- as.Date(Data$date)
# Data[Data$sharetext == "",]$sharetext <- "No Share Text"
Data[Data$sharetext == "",]$sharetext <- as.character(Data[Data$sharetext == "",]$status_id)
Data[Data$headline == "",]$headline <- as.character(Data[Data$headline == "",]$status_id)
Encoding(Data$sharetext) <- "latin1"
Encoding(Data$headline) <- "latin1"
Data$total_interactions <- Data$total_comments+Data$total_likes + Data$total_shares
Data$interaction_rate <- (Data$total_comments+Data$total_likes + Data$total_shares)/Data$post_reach
Data$ctr <- Data$link_clicks/Data$post_reach
Data$views_rate <- Data$post_video_views/Data$post_reach
Data$viral_fan_rate <- Data$post_reach_viral_unique/Data$post_reach_fan_unique
Data$share_rate <- Data$total_shares/(Data$total_comments + Data$total_likes + Data$total_shares)
Data$total_reactions <- (Data$feed_likes + Data$love + Data$wow + Data$haha + Data$sad + Data$angry)
Data$feed_likes_rate <- round(Data$feed_likes/Data$total_reactions, 4)
Data$love_rate <- round(Data$love/Data$total_reactions, 4)
Data$wow_rate <- round(Data$wow/Data$total_reactions, 4)
Data$haha_rate <- round(Data$haha/Data$total_reactions, 4)
Data$sad_rate <- round(Data$sad/Data$total_reactions, 4)
Data$angry_rate <- round(Data$angry/Data$total_reactions, 4)
Data$viral_rate <- (Data$post_reach_viral_unique/(Data$post_reach_fan_unique + Data$post_reach_viral_unique))
Data$fan_rate <- (Data$post_reach_fan_unique/(Data$post_reach_fan_unique + Data$post_reach_viral_unique))
Data$post_image <- paste("<img src ='", Data$full_picture,"'",'title=""', 'alt="" border="0" height="100" width="100">')
Data <- merge(WamFeedData, WamPostData, by = "status_id", all.x = TRUE)
Data <- Data[!duplicated(Data),]
Data$created_time <- as.POSIXct(strptime(Data$created_time, "%d/%m/%Y %H:%M"), tz = "GMT")
Data$date = strptime(Data$date, "%d/%m/%Y")
Data$date <- as.Date(Data$date)
# Data[Data$sharetext == "",]$sharetext <- "No Share Text"
Data[Data$sharetext == "",]$sharetext <- as.character(Data[Data$sharetext == "",]$status_id)
Data[Data$headline == "",]$headline <- as.character(Data[Data$headline == "",]$status_id)
Encoding(Data$sharetext) <- "latin1"
Encoding(Data$headline) <- "latin1"
Data$total_interactions <- Data$total_comments+Data$total_likes + Data$total_shares
Data$interaction_rate <- (Data$total_comments+Data$total_likes + Data$total_shares)/Data$post_reach
Data$ctr <- Data$link_clicks/Data$post_reach
Data$views_rate <- Data$post_video_views/Data$post_reach
Data$viral_fan_rate <- Data$post_reach_viral_unique/Data$post_reach_fan_unique
Data$share_rate <- Data$total_shares/(Data$total_comments + Data$total_likes + Data$total_shares)
Data$total_reactions <- (Data$feed_likes + Data$love + Data$wow + Data$haha + Data$sad + Data$angry)
Data$feed_likes_rate <- round(Data$feed_likes/Data$total_reactions, 4)
Data$love_rate <- round(Data$love/Data$total_reactions, 4)
Data$wow_rate <- round(Data$wow/Data$total_reactions, 4)
Data$haha_rate <- round(Data$haha/Data$total_reactions, 4)
Data$sad_rate <- round(Data$sad/Data$total_reactions, 4)
Data$angry_rate <- round(Data$angry/Data$total_reactions, 4)
Data$viral_rate <- (Data$post_reach_viral_unique/(Data$post_reach_fan_unique + Data$post_reach_viral_unique))
Data$fan_rate <- (Data$post_reach_fan_unique/(Data$post_reach_fan_unique + Data$post_reach_viral_unique))
Data$post_image <- paste("<img src ='", Data$full_picture,"'",'title=""', 'alt="" border="0" height="100" width="100">')
Data <- Data[!duplicated(Data),]
Data$created_time <- as.POSIXct(strptime(Data$created_time, "%d/%m/%Y %H:%M"), tz = "GMT")
Data$date = strptime(Data$date, "%d/%m/%Y")
Data$date <- as.Date(Data$date)
# Data[Data$sharetext == "",]$sharetext <- "No Share Text"
Data[Data$sharetext == "",]$sharetext <- as.character(Data[Data$sharetext == "",]$status_id)
Data[Data$headline == "",]$headline <- as.character(Data[Data$headline == "",]$status_id)
Encoding(Data$sharetext) <- "latin1"
Encoding(Data$headline) <- "latin1"
Data$total_interactions <- Data$total_comments+Data$total_likes + Data$total_shares
Data$interaction_rate <- (Data$total_comments+Data$total_likes + Data$total_shares)/Data$post_reach
Data$ctr <- Data$link_clicks/Data$post_reach
Data$views_rate <- Data$post_video_views/Data$post_reach
Data$viral_fan_rate <- Data$post_reach_viral/Data$post_reach_fan
Data$share_rate <- Data$total_shares/(Data$total_comments + Data$total_likes + Data$total_shares)
Data$total_reactions <- (Data$feed_likes + Data$love + Data$wow + Data$haha + Data$sad + Data$angry)
Data$feed_likes_rate <- round(Data$feed_likes/Data$total_reactions, 4)
Data$love_rate <- round(Data$love/Data$total_reactions, 4)
Data$wow_rate <- round(Data$wow/Data$total_reactions, 4)
Data$haha_rate <- round(Data$haha/Data$total_reactions, 4)
Data$sad_rate <- round(Data$sad/Data$total_reactions, 4)
Data$angry_rate <- round(Data$angry/Data$total_reactions, 4)
Data$viral_rate <- (Data$post_reach_viral/(Data$post_reach_fan + Data$post_reach_viral))
Data$fan_rate <- (Data$post_reach_fan/(Data$post_reach_fan + Data$post_reach_viral))
Data$post_image <- paste("<img src ='", Data$full_picture,"'",'title=""', 'alt="" border="0" height="100" width="100">')
DataArticles <- Data[Data$post_type == "link",]
DataArticles <- merge(DataArticles, EditorialData, by = "status_id", all.x = TRUE)
DataArticles <- merge(DataArticles[,], LinkData[,c("status_id", "mitu_link", "category", "sponsored", "reposted", "original", "repost", "repost_order", "times_repost", "days_bet_repost")])
DataArticles <- ddply(DataArticles, "mitu_link", transform, average_ctr = mean(ctr), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_link_clicks = mean(link_clicks))
DataArticles$author_status <- ifelse(!(DataArticles$author %in% c("Jorge Rodriguez-Jimenez", "Omar Villegas", "Lucas Molandes", "Jessica Garcia", "Andrew Santiago", "Jason Marcus")), "Contributor", DataArticles$author)
DataArticles$author_status <- ifelse(DataArticles$author %in% c("mitÃº Staff", "Adriana Venegas", "Fidel Martinez", "Alex Alvarez", "Wendy Barba"), "Old Staff", DataArticles$author_status)
library(RMySQL)
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
rs <- dbSendQuery(mydb, "select * from PAGE_DATA where from_name = 'We are mitu'")
WamPageData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from FEED_DATA")
WamFeedData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA")
WamPostData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from CONTENT_TRACK")
ContentTrackData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from EDITORIAL_AUTHOR")
EditorialData <- fetch(rs, -1)
dbClearResult(rs)
dbDisconnect(mydb)
Data <- merge(WamFeedData, WamPostData, by = "status_id", all.x = TRUE)
Data <- Data[!duplicated(Data),]
Data$created_time <- as.POSIXct(strptime(Data$created_time, "%d/%m/%Y %H:%M"), tz = "GMT")
Data$date = strptime(Data$date, "%d/%m/%Y")
Data$date <- as.Date(Data$date)
# Data[Data$sharetext == "",]$sharetext <- "No Share Text"
Data[Data$sharetext == "",]$sharetext <- as.character(Data[Data$sharetext == "",]$status_id)
Data[Data$headline == "",]$headline <- as.character(Data[Data$headline == "",]$status_id)
Encoding(Data$sharetext) <- "latin1"
Encoding(Data$headline) <- "latin1"
Data$total_interactions <- Data$total_comments+Data$total_likes + Data$total_shares
Data$interaction_rate <- (Data$total_comments+Data$total_likes + Data$total_shares)/Data$post_reach
Data$ctr <- Data$link_clicks/Data$post_reach
Data$views_rate <- Data$post_video_views/Data$post_reach
Data$viral_fan_rate <- Data$post_reach_viral/Data$post_reach_fan
Data$share_rate <- Data$total_shares/(Data$total_comments + Data$total_likes + Data$total_shares)
Data$total_reactions <- (Data$feed_likes + Data$love + Data$wow + Data$haha + Data$sad + Data$angry)
Data$feed_likes_rate <- round(Data$feed_likes/Data$total_reactions, 4)
Data$love_rate <- round(Data$love/Data$total_reactions, 4)
Data$wow_rate <- round(Data$wow/Data$total_reactions, 4)
Data$haha_rate <- round(Data$haha/Data$total_reactions, 4)
Data$sad_rate <- round(Data$sad/Data$total_reactions, 4)
Data$angry_rate <- round(Data$angry/Data$total_reactions, 4)
Data$viral_rate <- (Data$post_reach_viral/(Data$post_reach_fan + Data$post_reach_viral))
Data$fan_rate <- (Data$post_reach_fan/(Data$post_reach_fan + Data$post_reach_viral))
Data$post_image <- paste("<img src ='", Data$full_picture,"'",'title=""', 'alt="" border="0" height="100" width="100">')
DataArticles <- Data[Data$post_type == "link",]
DataArticles <- merge(DataArticles, EditorialData, by = "status_id", all.x = TRUE)
DataArticles <- merge(DataArticles[,], LinkData[,c("status_id", "mitu_link", "category", "sponsored", "reposted", "original", "repost", "repost_order", "times_repost", "days_bet_repost")])
DataArticles <- ddply(DataArticles, "mitu_link", transform, average_ctr = mean(ctr), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_link_clicks = mean(link_clicks))
DataArticles$author_status <- ifelse(!(DataArticles$author %in% c("Jorge Rodriguez-Jimenez", "Omar Villegas", "Lucas Molandes", "Jessica Garcia", "Andrew Santiago", "Jason Marcus")), "Contributor", DataArticles$author)
DataArticles$author_status <- ifelse(DataArticles$author %in% c("mitÃº Staff", "Adriana Venegas", "Fidel Martinez", "Alex Alvarez", "Wendy Barba"), "Old Staff", DataArticles$author_status)
DataVideos <- Data[Data$post_type == "video",]
DataVideos <- merge(DataVideos[,], VideoData[,c("status_id", "video_repost_sharetext", "video_meme", "series", "category", "format", "sponsored", "reposted", "original", "repost", "repost_order", "times_repost", "days_bet_repost")])
DataVideos <- ddply(DataVideos, "video_repost_sharetext", transform, average_views_rate = mean(views_rate), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_video_views = mean(post_video_views), average_viral_fan_rate = mean(viral_fan_rate))
# DataVideos$created_time <- as.POSIXct(strptime(DataVideos$created_time, "%d/%m/%Y %H:%M"), tz = "GMT")
DataPhotos <- Data[Data$post_type == "photo",]
DataPhotos <- merge(DataPhotos[,],PhotoData[,c("status_id", "image_text_py", "reposted", "original", "repost", "repost_order", "times_repost", "days_bet_repost")])
DataPhotos <- ddply(DataPhotos, "image_text_py", transform, average_share_rate = mean(share_rate), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_viral_fan_rate = mean(viral_fan_rate))
# DataPhotos$created_time <- as.POSIXct(strptime(DataPhotos$created_time, "%d/%m/%Y %H:%M"), tz = "GMT")
runApp()
runApp()
rm(list=ls())
LinkData <- read.csv("data/LinkData.csv", header = TRUE, stringsAsFactors = FALSE)
VideoData <- read.csv("data/VideoData.csv", header = TRUE, stringsAsFactors = FALSE)
PhotoData <- read.csv("data/PhotoData.csv", header = TRUE, stringsAsFactors = FALSE)
library(RMySQL)
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
rs <- dbSendQuery(mydb, "select * from PAGE_DATA where from_name = 'We are mitu'")
WamPageData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from FEED_DATA")
WamFeedData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA")
WamPostData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from CONTENT_TRACK")
ContentTrackData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from EDITORIAL_AUTHOR")
EditorialData <- fetch(rs, -1)
dbClearResult(rs)
dbDisconnect(mydb)
Data <- merge(WamFeedData, WamPostData, by = "status_id", all.x = TRUE)
View(Data)
Data <- Data[!duplicated(Data),]
Data$created_time <- as.POSIXct(strptime(Data$created_time, "%d/%m/%Y %H:%M"), tz = "GMT")
Data$date = strptime(Data$date, "%d/%m/%Y")
Data$date <- as.Date(Data$date)
Data[Data$sharetext == "",]$sharetext <- as.character(Data[Data$sharetext == "",]$status_id)
Data[Data$headline == "",]$headline <- as.character(Data[Data$headline == "",]$status_id)
Data$total_interactions <- Data$total_comments+Data$total_likes + Data$total_shares
Data$interaction_rate <- (Data$total_comments+Data$total_likes + Data$total_shares)/Data$post_reach
Data$ctr <- Data$link_clicks/Data$post_reach
Data$views_rate <- Data$post_video_views/Data$post_reach
Data$viral_fan_rate <- Data$post_reach_viral/Data$post_reach_fan
Data$share_rate <- Data$total_shares/(Data$total_comments + Data$total_likes + Data$total_shares)
Data$total_reactions <- (Data$feed_likes + Data$love + Data$wow + Data$haha + Data$sad + Data$angry)
Data$feed_likes_rate <- round(Data$feed_likes/Data$total_reactions, 4)
Data$love_rate <- round(Data$love/Data$total_reactions, 4)
Data$wow_rate <- round(Data$wow/Data$total_reactions, 4)
Data$haha_rate <- round(Data$haha/Data$total_reactions, 4)
Data$sad_rate <- round(Data$sad/Data$total_reactions, 4)
Data$angry_rate <- round(Data$angry/Data$total_reactions, 4)
Data$viral_rate <- (Data$post_reach_viral/(Data$post_reach_fan + Data$post_reach_viral))
Data$fan_rate <- (Data$post_reach_fan/(Data$post_reach_fan + Data$post_reach_viral))
Data$post_image <- paste("<img src ='", Data$full_picture,"'",'title=""', 'alt="" border="0" height="100" width="100">')
ataArticles <- Data[Data$post_type == "link",]
DataArticles <- merge(DataArticles, EditorialData, by = "status_id", all.x = TRUE)
DataArticles <- merge(DataArticles[,], LinkData[,c("status_id", "mitu_link", "category", "sponsored", "reposted", "original", "repost", "repost_order", "times_repost", "days_bet_repost")])
DataArticles <- ddply(DataArticles, "mitu_link", transform, average_ctr = mean(ctr), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_link_clicks = mean(link_clicks))
DataArticles$author_status <- ifelse(!(DataArticles$author %in% c("Jorge Rodriguez-Jimenez", "Omar Villegas", "Lucas Molandes", "Jessica Garcia", "Andrew Santiago", "Jason Marcus")), "Contributor", DataArticles$author)
DataArticles$author_status <- ifelse(DataArticles$author %in% c("mitÃº Staff", "Adriana Venegas", "Fidel Martinez", "Alex Alvarez", "Wendy Barba"), "Old Staff", DataArticles$author_status)
DataArticles <- Data[Data$post_type == "link",]
DataArticles <- merge(DataArticles, EditorialData, by = "status_id", all.x = TRUE)
DataArticles <- merge(DataArticles[,], LinkData[,c("status_id", "mitu_link", "category", "sponsored", "reposted", "original", "repost", "repost_order", "times_repost", "days_bet_repost")])
DataArticles <- ddply(DataArticles, "mitu_link", transform, average_ctr = mean(ctr), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_link_clicks = mean(link_clicks))
DataArticles$author_status <- ifelse(!(DataArticles$author %in% c("Jorge Rodriguez-Jimenez", "Omar Villegas", "Lucas Molandes", "Jessica Garcia", "Andrew Santiago", "Jason Marcus")), "Contributor", DataArticles$author)
DataArticles$author_status <- ifelse(DataArticles$author %in% c("mitÃº Staff", "Adriana Venegas", "Fidel Martinez", "Alex Alvarez", "Wendy Barba"), "Old Staff", DataArticles$author_status)
DataVideos <- Data[Data$post_type == "video",]
DataVideos <- merge(DataVideos[,], VideoData[,c("status_id", "video_repost_sharetext", "video_meme", "series", "category", "format", "sponsored", "reposted", "original", "repost", "repost_order", "times_repost", "days_bet_repost")])
DataVideos <- ddply(DataVideos, "video_repost_sharetext", transform, average_views_rate = mean(views_rate), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_video_views = mean(post_video_views), average_viral_fan_rate = mean(viral_fan_rate))
# DataVideos$created_time <- as.POSIXct(strptime(DataVideos$created_time, "%d/%m/%Y %H:%M"), tz = "GMT")
DataPhotos <- Data[Data$post_type == "photo",]
DataPhotos <- merge(DataPhotos[,],PhotoData[,c("status_id", "image_text_py", "reposted", "original", "repost", "repost_order", "times_repost", "days_bet_repost")])
DataPhotos <- ddply(DataPhotos, "image_text_py", transform, average_share_rate = mean(share_rate), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_viral_fan_rate = mean(viral_fan_rate))
# DataPhotos$created_time <- as.POSIXct(strptime(DataPhotos$created_time, "%d/%m/%Y %H:%M"), tz = "GMT")
runApp()
class(Data$date)
range(Data$date)
View(Data)
LinkData <- read.csv("data/LinkData.csv", header = TRUE, stringsAsFactors = FALSE)
VideoData <- read.csv("data/VideoData.csv", header = TRUE, stringsAsFactors = FALSE)
PhotoData <- read.csv("data/PhotoData.csv", header = TRUE, stringsAsFactors = FALSE)
library(RMySQL)
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
rs <- dbSendQuery(mydb, "select * from PAGE_DATA where from_name = 'We are mitu'")
WamPageData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from FEED_DATA")
WamFeedData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA")
WamPostData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from CONTENT_TRACK")
ContentTrackData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from EDITORIAL_AUTHOR")
EditorialData <- fetch(rs, -1)
dbClearResult(rs)
dbDisconnect(mydb)
Data <- merge(WamFeedData, WamPostData, by = "status_id", all.x = TRUE)
View(Data)
class(Data$date)
Data$date <- as.Date(Data$date)
View(Data)
class(Data$date)
range(Data$date)
View(Data)
runApp()
View(Data)
View(Data)
runApp()
runApp()
shiny::runApp()
years(1)
library(ggplot2)
library(reshape)
library(scales)
library(shiny)
library(shinydashboard)
library(plyr)
library(dplyr)
library(tidyr)
library(viridis)
library(ggthemes)
library(RColorBrewer)
library(highcharter)
library(quantmod)
library(dtplyr)
library(data.table)
library(readr)
library(lubridate)
# library(jsonlite)
years(1)
as.Date(2016-01-01) + years(1)
runApp()
year_selected <- as.Date(paste("2017", "-01-01", sep = ""))
dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, "%Y-%m"))
DataGoals <- read.csv("data/WAM KPIs 2017.csv", header = TRUE, stringsAsFactors = FALSE)
DataGoals$date <- strptime(DataGoals$date, "%d/%m/%Y")
dates <- data.frame(date = format(DataGoals[which(DataGoals$date >= year_selected & DataGoals$date < year_selected + years(1)),]$date, "%Y-%m"))
View(dates)
DataMonth <- WamPageData
DataMonth$page_followers <- DataMonth$page_fans
DataMonth <- ddply(DataMonth[which(DataMonth$date >= year_selected & DataMonth$date < year_selected + years(1)),], .(date = format(DataMonth$date, "%Y-%m")), summarize, page_followers = max(page_followers))
DataMonth <- ddply(DataMonth[which(DataMonth$date >= year_selected & DataMonth$date < year_selected + years(1)),], .(date = format(DataMonth$date, "%Y-%m")), summarize, page_followers = max(page_followers))
View(DataMonth)
clas(DataMonth$date)
class(DataMonth$date)
WamPageData$date <- as.Date(WamPageData$date)
DataMonth <- WamPageData
DataMonth$page_followers <- DataMonth$page_fans
DataMonth <- ddply(DataMonth[which(DataMonth$date >= year_selected & DataMonth$date < year_selected + years(1)),], .(date = format(DataMonth$date, "%Y-%m")), summarize, page_followers = max(page_followers))
View(DataMonth)
year_selected <- as.Date(paste("2017", "-01-01", sep = ""))
DataMonth <- WamPageData
DataMonth$page_followers <- DataMonth$page_fans
DataMonth <- DataMonth[which(DataMonth$date >= year_selected & DataMonth$date < year_selected + years(1)),]
View(DataMonth)
DataMonth <- ddply(DataMonth, .(date = format(DataMonth$date, "%Y-%m")), summarize, page_followers = max(page_followers))
View(DataMonth)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
article_data <- DataArticles[which(DataArticles$date >= date_range[1] & DataArticles$date < date_range[2] & DataArticles$repost == 0),]$link_clicks
date_range <- c("2017-05-01", "2017-08-01")
library(MASS)
library(fitdistrplus)
article_data <- DataArticles[which(DataArticles$date >= date_range[1] & DataArticles$date < date_range[2] & DataArticles$repost == 0),]$link_clicks
hchart(density(article_data), type = "area", color = "#B71C1C", name = "Link Clicks")
LinkData <- read.csv("data/LinkData.csv", header = TRUE, stringsAsFactors = FALSE)
VideoData <- read.csv("data/VideoData.csv", header = TRUE, stringsAsFactors = FALSE)
PhotoData <- read.csv("data/PhotoData.csv", header = TRUE, stringsAsFactors = FALSE)
library(RMySQL)
mydb = dbConnect(MySQL(), host = "104.198.210.36", user = "root", password = "tacozombies54992", db = "analytics")
rs <- dbSendQuery(mydb, "select * from PAGE_DATA where from_name = 'We are mitu'")
WamPageData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from FEED_DATA")
WamFeedData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from POST_DATA")
WamPostData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from CONTENT_TRACK")
ContentTrackData <- fetch(rs, -1)
rs <- dbSendQuery(mydb, "select * from EDITORIAL_AUTHOR")
EditorialData <- fetch(rs, -1)
dbClearResult(rs)
dbDisconnect(mydb)
WamPageData$date <- as.Date(WamPageData$date)
Data <- merge(WamFeedData, WamPostData, by = "status_id", all.x = TRUE)
DataGoals <- read.csv("data/WAM KPIs 2017.csv", header = TRUE, stringsAsFactors = FALSE)
DataGoals$date <- strptime(DataGoals$date, "%d/%m/%Y")
hcoptslang <- getOption("highcharter.lang")
hcoptslang$thousandsSep <- ","
options(highcharter.lang = hcoptslang)
Data <- Data[!duplicated(Data),]
Data$created_time <- as.POSIXct(strptime(Data$created_time, "%Y-%m-%d %H:%M"), tz = "GMT")
# Data$date = strptime(Data$date, "%d/%m/%Y")
Data$date <- as.Date(Data$date)
# Data[Data$sharetext == "",]$sharetext <- "No Share Text"
Data[Data$sharetext == "",]$sharetext <- as.character(Data[Data$sharetext == "",]$status_id)
Data[Data$headline == "",]$headline <- as.character(Data[Data$headline == "",]$status_id)
Encoding(Data$sharetext) <- "latin1"
Encoding(Data$headline) <- "latin1"
Data$total_interactions <- Data$total_comments+Data$total_likes + Data$total_shares
Data$interaction_rate <- (Data$total_comments+Data$total_likes + Data$total_shares)/Data$post_reach
Data$ctr <- Data$link_clicks/Data$post_reach
Data$views_rate <- Data$post_video_views/Data$post_reach
Data$viral_fan_rate <- Data$post_reach_viral/Data$post_reach_fan
Data$share_rate <- Data$total_shares/(Data$total_comments + Data$total_likes + Data$total_shares)
Data$total_reactions <- (Data$feed_likes + Data$love + Data$wow + Data$haha + Data$sad + Data$angry)
Data$feed_likes_rate <- round(Data$feed_likes/Data$total_reactions, 4)
Data$love_rate <- round(Data$love/Data$total_reactions, 4)
Data$wow_rate <- round(Data$wow/Data$total_reactions, 4)
Data$haha_rate <- round(Data$haha/Data$total_reactions, 4)
Data$sad_rate <- round(Data$sad/Data$total_reactions, 4)
Data$angry_rate <- round(Data$angry/Data$total_reactions, 4)
Data$viral_rate <- (Data$post_reach_viral/(Data$post_reach_fan + Data$post_reach_viral))
Data$fan_rate <- (Data$post_reach_fan/(Data$post_reach_fan + Data$post_reach_viral))
Data$post_image <- paste("<img src ='", Data$full_picture,"'",'title=""', 'alt="" border="0" height="100" width="100">')
DataArticles <- Data[Data$post_type == "link",]
DataArticles <- merge(DataArticles, EditorialData, by = "status_id", all.x = TRUE)
DataArticles <- merge(DataArticles[,], LinkData[,c("status_id", "mitu_link", "category", "sponsored", "reposted", "original", "repost", "repost_order", "times_repost", "days_bet_repost")])
DataArticles <- ddply(DataArticles, "mitu_link", transform, average_ctr = mean(ctr), average_interaction_rate = mean(interaction_rate), average_post_reach = mean(post_reach), average_link_clicks = mean(link_clicks))
DataArticles$author_status <- ifelse(!(DataArticles$author %in% c("Jorge Rodriguez-Jimenez", "Omar Villegas", "Lucas Molandes", "Jessica Garcia", "Andrew Santiago", "Jason Marcus")), "Contributor", DataArticles$author)
DataArticles$author_status <- ifelse(DataArticles$author %in% c("mitÃº Staff", "Adriana Venegas", "Fidel Martinez", "Alex Alvarez", "Wendy Barba"), "Old Staff", DataArticles$author_status)
date_range <- c("2017-05-01", "2017-08-01")
article_data <- DataArticles[which(DataArticles$date >= date_range[1] & DataArticles$date < date_range[2] & DataArticles$repost == 0),]$link_clicks
hchart(density(article_data), type = "area", color = "#B71C1C", name = "Link Clicks")
hchart(article_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?denscomp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
quantile(DataArticles$link_clicks, probs = c(0.05, 0.95))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
